"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—Ä—Ç –¢–∞—Ä–æ - –∑–∞–≥—Ä—É–∑–∫–∞, –≤—ã–±–æ—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–¥–æ–π
"""
import json
import random
import os
from typing import List, Dict, Optional


class TarotDeck:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–æ–¥–æ–π –∫–∞—Ä—Ç –¢–∞—Ä–æ"""
    
    def __init__(self, cards_file_path: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–¥—ã –¢–∞—Ä–æ
        
        :param cards_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç
        """
        if cards_file_path is None:
            # –ü—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            cards_file_path = os.path.join(project_root, 'assets', 'tarot-cards-images-info-ru.json')
        
        self.cards_file_path = cards_file_path
        self._cards = []
        self._load_cards()
    
    def _load_cards(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.cards_file_path):
                raise FileNotFoundError(f"–§–∞–π–ª —Å –∫–∞—Ä—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.cards_file_path}")
            
            with open(self.cards_file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON
            if not isinstance(data, dict):
                raise ValueError("JSON —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—ä–µ–∫—Ç")
            
            if 'cards' not in data:
                raise ValueError("JSON —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ 'cards'")
            
            if not isinstance(data['cards'], list):
                raise ValueError("–ü–æ–ª–µ 'cards' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º")
            
            self._cards = data['cards']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
            if len(self._cards) != 78:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(self._cards)} –∫–∞—Ä—Ç –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö 78")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ
            required_fields = ['name', 'number', 'arcana', 'suit', 'img']
            for i, card in enumerate(self._cards):
                for field in required_fields:
                    if field not in card:
                        raise ValueError(f"–ö–∞—Ä—Ç–∞ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(self._cards)} –∫–∞—Ä—Ç –¢–∞—Ä–æ")
            
        except FileNotFoundError as e:
            raise FileNotFoundError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–∞–º–∏: {e}")
        except json.JSONDecodeError as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç: {e}")
    
    @property
    def cards(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç"""
        return self._cards.copy()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    def get_card_by_index(self, index: int) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ –∏–Ω–¥–µ–∫—Å—É
        
        :param index: –ò–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã (0-77)
        :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç—ã –∏–ª–∏ None –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–≤–µ—Ä–Ω—ã–π
        """
        if 0 <= index < len(self._cards):
            return self._cards[index].copy()
        return None
    
    def get_card_image_path(self, card: Dict, images_dir: str = None) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–∞—Ä—Ç—ã
        
        :param card: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç—ã
        :param images_dir: –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é assets/cards)
        :return: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        if images_dir is None:
            project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            images_dir = os.path.join(project_root, 'assets', 'cards')
        
        image_filename = card.get('img')
        if not image_filename:
            raise ValueError(f"–£ –∫–∞—Ä—Ç—ã '{card.get('name', 'unknown')}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'img'")
        
        image_path = os.path.join(images_dir, image_filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not os.path.exists(image_path):
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
        
        return image_path
    
    def get_cards_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ"""
        return len(self._cards)
    
    def get_major_arcana(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤"""
        return [card for card in self._cards if card.get('arcana') == 'Major Arcana']
    
    def get_minor_arcana(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã –ú–ª–∞–¥—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤"""
        return [card for card in self._cards if card.get('arcana') == 'Minor Arcana']


def select_cards(deck: TarotDeck, count: int, magic_number: int, user_age: int = None, timestamp: int = None) -> List[Dict]:
    """
    –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç –∏–∑ –∫–æ–ª–æ–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–æ–∂–Ω–æ–≥–æ seed
    
    :param deck: –≠–∫–∑–µ–º–ø–ª—è—Ä TarotDeck
    :param count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞
    :param magic_number: –ú–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param user_age: –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :return: –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
    """
    if not isinstance(deck, TarotDeck):
        raise TypeError("–ü–∞—Ä–∞–º–µ—Ç—Ä deck –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º TarotDeck")
    
    if count <= 0:
        raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    
    if count > deck.get_cards_count():
        raise ValueError(f"–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å {count} –∫–∞—Ä—Ç –∏–∑ –∫–æ–ª–æ–¥—ã –≤ {deck.get_cards_count()} –∫–∞—Ä—Ç")
    
    if not isinstance(magic_number, int):
        raise TypeError("–ú–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–π seed
    if user_age is not None:
        # Seed: –º–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ + –≤–æ–∑—Ä–∞—Å—Ç (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        complex_seed = magic_number + user_age
        print(f"üé¥ –í—ã–±—Ä–∞–Ω–æ {count} –∫–∞—Ä—Ç —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º seed: {magic_number} + {user_age} = {complex_seed}")
    else:
        # –ü—Ä–æ—Å—Ç–æ–π seed —Ç–æ–ª—å–∫–æ –∏–∑ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —á–∏—Å–ª–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        complex_seed = magic_number
        print(f"üé¥ –í—ã–±—Ä–∞–Ω–æ {count} –∫–∞—Ä—Ç —Å –º–∞–≥–∏—á–µ—Å–∫–∏–º —á–∏—Å–ª–æ–º {magic_number}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    random.seed(complex_seed)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    all_cards = deck.cards
    selected_cards = random.sample(all_cards, count)
    
    return selected_cards


def format_card_info(card: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    :param card: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç—ã
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∞—Ä–∫–∞–Ω–æ–π
    """
    if not isinstance(card, dict):
        raise TypeError("–ö–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä—ë–º")
    
    name = card.get('name', 'Unknown Card')
    arcana = card.get('arcana', 'Unknown Arcana')
    
    return f"{name} ({arcana})"


def validate_card_images(deck: TarotDeck, images_dir: str = None) -> Dict:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç
    
    :param deck: –≠–∫–∑–µ–º–ø–ª—è—Ä TarotDeck
    :param images_dir: –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    if images_dir is None:
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        images_dir = os.path.join(project_root, 'assets', 'cards')
    
    results = {
        'total_cards': deck.get_cards_count(),
        'existing_images': 0,
        'missing_images': 0,
        'missing_files': []
    }
    
    for card in deck.cards:
        image_path = deck.get_card_image_path(card, images_dir)
        if os.path.exists(image_path):
            results['existing_images'] += 1
        else:
            results['missing_images'] += 1
            results['missing_files'].append({
                'card': card.get('name'),
                'file': card.get('img'),
                'path': image_path
            })
    
    return results


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    print("üîÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è card_manager.py")
    print("=" * 50)
    
    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã
        print("\n1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã...")
        deck = TarotDeck()
        print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ä—Ç: {deck.get_cards_count()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∞—Ä–∫–∞–Ω—ã
        major_arcana = deck.get_major_arcana()
        minor_arcana = deck.get_minor_arcana()
        print(f"   –°—Ç–∞—Ä—à–∏–µ –∞—Ä–∫–∞–Ω—ã: {len(major_arcana)}")
        print(f"   –ú–ª–∞–¥—à–∏–µ –∞—Ä–∫–∞–Ω—ã: {len(minor_arcana)}")
        
        # 2. –í—ã–±–æ—Ä –∫–∞—Ä—Ç —Å magic_number=777
        print("\n2Ô∏è‚É£ –í—ã–±–æ—Ä 3 –∫–∞—Ä—Ç —Å –º–∞–≥–∏—á–µ—Å–∫–∏–º —á–∏—Å–ª–æ–º 777...")
        selected_cards_1 = select_cards(deck, 3, 777)
        
        print("   –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:")
        for i, card in enumerate(selected_cards_1, 1):
            formatted = format_card_info(card)
            image_path = deck.get_card_image_path(card)
            print(f"   {i}. {formatted}")
            print(f"      –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {os.path.basename(image_path)}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ (—Ç–æ—Ç –∂–µ magic_number)...")
        selected_cards_2 = select_cards(deck, 3, 777)
        
        same_cards = True
        for card1, card2 in zip(selected_cards_1, selected_cards_2):
            if card1['name'] != card2['name']:
                same_cards = False
                break
        
        if same_cards:
            print("   ‚úÖ –ü—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –º–∞–≥–∏—á–µ—Å–∫–æ–º —á–∏—Å–ª–µ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Ç–µ –∂–µ –∫–∞—Ä—Ç—ã")
        else:
            print("   ‚ùå –ü—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –º–∞–≥–∏—á–µ—Å–∫–æ–º —á–∏—Å–ª–µ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –∫–∞—Ä—Ç—ã")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç –≤ —Ä–∞—Å–∫–ª–∞–¥–µ
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç –≤ —Ä–∞—Å–∫–ª–∞–¥–µ...")
        test_cards = select_cards(deck, 10, 123)  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å 10 –∫–∞—Ä—Ç–∞–º–∏
        card_names = [card['name'] for card in test_cards]
        unique_names = set(card_names)
        
        if len(card_names) == len(unique_names):
            print("   ‚úÖ –í—Å–µ –∫–∞—Ä—Ç—ã –≤ —Ä–∞—Å–∫–ª–∞–¥–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã")
        else:
            duplicates = len(card_names) - len(unique_names)
            print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ {duplicates} –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∫–∞—Ä—Ç")
        
        # 5. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É...")
        first_card = deck.get_card_by_index(0)
        last_card = deck.get_card_by_index(77)
        invalid_card = deck.get_card_by_index(100)
        
        print(f"   –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ (–∏–Ω–¥–µ–∫—Å 0): {format_card_info(first_card)}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ (–∏–Ω–¥–µ–∫—Å 77): {format_card_info(last_card)}")
        print(f"   –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å: {invalid_card}")
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤—ã–±–æ—Ä–æ—á–Ω–æ)
        print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç...")
        image_results = validate_card_images(deck)
        print(f"   –í—Å–µ–≥–æ –∫–∞—Ä—Ç: {image_results['total_cards']}")
        print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã: {image_results['existing_images']}")
        print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {image_results['missing_images']}")
        
        if image_results['missing_images'] > 0:
            print("   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
            for missing in image_results['missing_files'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"     - {missing['card']}: {missing['file']}")
            if len(image_results['missing_files']) > 5:
                print(f"     ... –∏ –µ—â—ë {len(image_results['missing_files']) - 5}")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()