"""
–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ
"""

import logging
from typing import Optional, Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from src.spread_logger import get_spread_logger
from src.simple_state import UserState, set_state, get_user_data, update_data, reset_to_idle
from src.keyboards import main_menu

logger = logging.getLogger(__name__)

class FeedbackSystem:
    """–°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    
    # –†–µ–π—Ç–∏–Ω–≥–∏ —Å —ç–º–æ–¥–∑–∏
    RATING_EMOJIS = {
        1: "‚≠ê",
        2: "‚≠ê‚≠ê", 
        3: "‚≠ê‚≠ê‚≠ê",
        4: "‚≠ê‚≠ê‚≠ê‚≠ê",
        5: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
    }
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    THANK_YOU_MESSAGES = {
        1: "üòî –û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! –ë—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π.",
        2: "üòê –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
        3: "üòä –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –†–∞–¥, —á—Ç–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–ª–µ–∑–Ω–æ–π.", 
        4: "üòÑ –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è!",
        5: "ü§© –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –û—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ —Å–º–æ–≥ –¥–∞—Ç—å —Ç–æ—á–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é!"
    }
    
    def create_rating_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏"""
        keyboard = []
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥: –∑–≤–µ–∑–¥—ã 1-3
        row1 = []
        for i in range(1, 4):
            emoji = self.RATING_EMOJIS[i]
            row1.append(InlineKeyboardButton(emoji, callback_data=f"rate_{i}"))
        keyboard.append(row1)
        
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥: –∑–≤–µ–∑–¥—ã 4-5
        row2 = []
        for i in range(4, 6):
            emoji = self.RATING_EMOJIS[i] 
            row2.append(InlineKeyboardButton(emoji, callback_data=f"rate_{i}"))
        keyboard.append(row2)
        
        # –¢—Ä–µ—Ç–∏–π —Ä—è–¥: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        keyboard.append([
            InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="feedback_comment"),
            InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", callback_data="spreads_list")
        ])
        
        # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    async def request_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                             chat_id: int) -> None:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            set_state(chat_id, UserState.WAITING_FEEDBACK)
            
            feedback_message = (
                "üåü **–û—Ü–µ–Ω–∏—Ç–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é**\n\n"
                "–í–∞—à –æ—Ç–∑—ã–≤ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –º–µ–Ω—è! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –±—É–¥—É—â–∏—Ö –≥–∞–¥–∞–Ω–∏–π.\n\n"
                "‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:"
            )
            
            keyboard = self.create_rating_keyboard()
            
            await update.message.reply_text(
                feedback_message,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
    
    async def handle_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            query = update.callback_query
            chat_id = query.message.chat.id
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ callback_data
            rating_str = query.data.replace("rate_", "")
            rating = int(rating_str)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            session_data = get_user_data(chat_id)
            log_filepath = session_data.get('log_filepath')
            
            if log_filepath:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –ª–æ–≥
                spread_logger = get_spread_logger()
                spread_logger.add_feedback(log_filepath, rating)
            
            # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            thank_you_message = self.THANK_YOU_MESSAGES.get(rating, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
            rating_emoji = self.RATING_EMOJIS.get(rating, "‚≠ê")
            
            response_message = (
                f"{thank_you_message}\n\n"
                f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating_emoji}\n\n"
                "‚ú® –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –Ω–æ–≤—ã–º–∏ —Ä–∞—Å–∫–ª–∞–¥–∞–º–∏!"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                response_message,
                reply_markup=main_menu()
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            reset_to_idle(chat_id, keep_data=False)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ {rating} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏")
    
    async def request_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        try:
            query = update.callback_query
            chat_id = query.message.chat.id
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            set_state(chat_id, UserState.WAITING_COMMENT)
            
            comment_message = (
                "üí¨ **–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π**\n\n"
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?\n"
                "–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ!\n\n"
                "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            cancel_keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="feedback_cancel")
            ]])
            
            await query.edit_message_text(
                comment_message,
                reply_markup=cancel_keyboard,
                parse_mode='Markdown'
            )
            
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
    
    async def handle_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        try:
            chat_id = update.effective_chat.id
            comment = update.message.text.strip()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session_data = get_user_data(chat_id)
            log_filepath = session_data.get('log_filepath')
            
            if log_filepath:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ª–æ–≥ (—Ä–µ–π—Ç–∏–Ω–≥ 0 = —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
                spread_logger = get_spread_logger()
                spread_logger.add_feedback(log_filepath, 0, comment)
            
            # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            response_message = (
                "üíù **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤!**\n\n"
                "–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—á–µ–Ω—å —Ü–µ–Ω–µ–Ω –¥–ª—è –º–µ–Ω—è. –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—É –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è "
                "–ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π.\n\n"
                "‚ú® –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –Ω–æ–≤—ã–º–∏ —Ä–∞—Å–∫–ª–∞–¥–∞–º–∏!"
            )
            
            await update.message.reply_text(
                response_message,
                reply_markup=main_menu(),
                parse_mode='Markdown'
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            reset_to_idle(chat_id, keep_data=False)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {comment[:50]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu()
            )
    
    async def cancel_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            query = update.callback_query
            chat_id = query.message.chat.id
            
            cancel_message = (
                "‚úÖ **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
                "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –Ω–æ–≤—ã–º–∏ —Ä–∞—Å–∫–ª–∞–¥–∞–º–∏ –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ.\n\n"
                "üîÆ –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º —Å–Ω–æ–≤–∞!"
            )
            
            await query.edit_message_text(
                cancel_message,
                reply_markup=main_menu(),
                parse_mode='Markdown'
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            reset_to_idle(chat_id, keep_data=False)
            
            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
    
    def get_user_feedback_stats(self, chat_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            spread_logger = get_spread_logger()
            stats = spread_logger.get_user_stats(chat_id)
            
            feedback_stats = {
                "total_ratings": stats.get("total_feedback", 0),
                "average_rating": stats.get("average_rating", 0),
                "total_spreads": stats.get("total_spreads", 0),
                "feedback_rate": 0
            }
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if stats.get("total_spreads", 0) > 0:
                feedback_stats["feedback_rate"] = round(
                    (stats.get("total_feedback", 0) / stats.get("total_spreads", 1)) * 100, 1
                )
            
            return feedback_stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
            return {}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
_feedback_system = None

def get_feedback_system() -> FeedbackSystem:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    global _feedback_system
    if _feedback_system is None:
        _feedback_system = FeedbackSystem()
    return _feedback_system