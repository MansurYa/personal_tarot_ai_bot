"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫ –∏ –ø–æ—à–∞–≥–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
"""
import logging
import io
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from src.keyboards import main_menu, spreads_menu, back_button, SPREAD_NAMES
from src.simple_state import UserState, get_state, set_state, update_data, get_user_data, reset_to_idle
from src.validators import validate_name, validate_birthdate, validate_magic_number
from src.user_manager import user_exists, save_user, get_user, update_last_spread
from src.spread_configs import get_spread_config
from src.card_manager import TarotDeck, select_cards
from src.image_generator import ImageGenerator
from src.spread_questions import get_questions_for_spread, get_spread_type_from_callback
from src.llm_integration import start_llm_interpretation, process_llm_questions
from src.feedback_system import get_feedback_system
from PIL import Image

logger = logging.getLogger(__name__)

# –í–°–ï 7 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ —Ç–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤—ã! (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç callback_data –∏–∑ keyboards.py)
IMPLEMENTED_SPREADS = {
    'spread_single',     # –ù–∞ –æ–¥–Ω—É –∫–∞—Ä—Ç—É
    'spread_three',      # –ù–∞ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã  
    'spread_horseshoe',  # –ü–æ–¥–∫–æ–≤–∞
    'spread_love',       # –õ—é–±–æ–≤–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
    'spread_celtic',     # –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç
    'spread_week',       # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é
    'spread_year'        # –ö–æ–ª–µ—Å–æ –≥–æ–¥–∞
}

# Mapping –º–µ–∂–¥—É callback_data –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
SPREAD_MAPPING = {
    'spread_single': 'single_card',
    'spread_three': 'three_cards', 
    'spread_horseshoe': 'horseshoe',
    'spread_love': 'love_triangle',
    'spread_celtic': 'celtic_cross',
    'spread_week': 'week_forecast',
    'spread_year': 'year_wheel'
}


async def perform_spread(update, context, spread_type, magic_number):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞:
    1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    2. –í—ã–±–æ—Ä –∫–∞—Ä—Ç  
    3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    4. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    
    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    :param spread_type: –¢–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'single_card')
    :param magic_number: –ú–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    chat_id = update.effective_chat.id
    session_data = get_user_data(chat_id)
    
    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º mapping)
        config_key = SPREAD_MAPPING.get(spread_type, spread_type)
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ {spread_type} -> {config_key}")
        config = get_spread_config(config_key)
        
        # 2. –í—ã–±–æ—Ä –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ card_manager —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º seed
        logger.info(f"–í—ã–±–æ—Ä {config['card_count']} –∫–∞—Ä—Ç —Å –º–∞–≥–∏—á–µ—Å–∫–∏–º —á–∏—Å–ª–æ–º {magic_number}")
        deck = TarotDeck()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        user_age = session_data.get('age', 0)
        current_timestamp = int(time.time())  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å —ç–ø–æ—Ö–∏ Unix
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º seed
        selected_cards = select_cards(deck, config['card_count'], magic_number, user_age, current_timestamp)
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ {spread_type}")
        generator = ImageGenerator()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        processing_msg = await update.message.reply_text(
            "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à —Ä–∞—Å–∫–ª–∞–¥...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
        )
        
        image_bytes = generator.generate_spread_image(
            background_id=config['background_id'],
            cards=selected_cards,
            positions=config['positions'],
            scale=config['scale']
        )
        
        # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–∫–∏
        image_io = io.BytesIO(image_bytes)
        image_io.name = f"{spread_type}_spread.png"
        
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=image_io,
            caption=f"üé¥ –í–∞—à —Ä–∞—Å–∫–ª–∞–¥ \"{config['name']}\" –≥–æ—Ç–æ–≤!"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        try:
            await processing_msg.delete()
        except:
            pass
        
        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–ø–∞–≤—à–∏—Ö –∫–∞—Ä—Ç —Ç–µ–∫—Å—Ç–æ–º
        cards_text = f"üé¥ –í–∞—à —Ä–∞—Å–∫–ª–∞–¥ \"{config['name']}\":\n\n"
        
        for i, card in enumerate(selected_cards, 1):
            card_meaning = config.get('card_meanings', [f'–ö–∞—Ä—Ç–∞ {i}'])[i-1] if i <= len(config.get('card_meanings', [])) else f'–ö–∞—Ä—Ç–∞ {i}'
            cards_text += f"{i}. **{card['name']}** ‚Äî {card_meaning}\n"
        
        cards_text += "\nüîÆ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏."
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥" –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", callback_data="spreads_list")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            cards_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        logger.info(f"–†–∞—Å–∫–ª–∞–¥ {spread_type} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ {spread_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback - —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç —Ç–µ–∫—Å—Ç–æ–º
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                await processing_msg.delete()
            except:
                pass
            
            config_key = SPREAD_MAPPING.get(spread_type, spread_type)
            config = get_spread_config(config_key)
            deck = TarotDeck()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π seed —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            user_age = session_data.get('age', 0)
            current_timestamp = int(time.time())
            selected_cards = select_cards(deck, config['card_count'], magic_number, user_age, current_timestamp)
            
            fallback_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞.\n\n"
            fallback_text += f"üé¥ –í–∞—à–∏ –∫–∞—Ä—Ç—ã \"{config['name']}\":\n\n"
            
            for i, card in enumerate(selected_cards, 1):
                card_meaning = config.get('card_meanings', [f'–ö–∞—Ä—Ç–∞ {i}'])[i-1] if i <= len(config.get('card_meanings', [])) else f'–ö–∞—Ä—Ç–∞ {i}'
                fallback_text += f"{i}. **{card['name']}** ‚Äî {card_meaning}\n"
            
            fallback_text += "\nüîÆ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏."
            
            keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", callback_data="spreads_list")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                fallback_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as fallback_error:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ fallback –¥–ª—è {chat_id}: {fallback_error}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞—Å–∫–ª–∞–¥:",
                reply_markup=main_menu()
            )


async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    
    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    welcome_text = (
        "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¢–∞—Ä–æ!\n\n"
        "–Ø –≤–∞—à –ª–∏—á–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥, –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–æ—Ç–∫—Ä—ã—Ç—å –∑–∞–≤–µ—Å—É –±—É–¥—É—â–µ–≥–æ.\n\n"
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    query = update.callback_query
    await query.edit_message_text(
        text=welcome_text,
        reply_markup=main_menu()
    )


async def handle_spreads_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ 7 —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    
    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    spreads_text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è:"
    
    query = update.callback_query
    await query.edit_message_text(
        text=spreads_text,
        reply_markup=spreads_menu()
    )


async def handle_spread_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ç–æ–∫
    
    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        query = update.callback_query
        chat_id = query.message.chat.id
        spread_type = query.data
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
        spread_name = SPREAD_NAMES.get(spread_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥")
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª —Ä–∞—Å–∫–ª–∞–¥: {spread_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if user_exists(chat_id):
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –∏ —Å—Ä–∞–∑—É –∫ –º–∞–≥–∏—á–µ—Å–∫–æ–º—É —á–∏—Å–ª—É
            user_data = get_user(chat_id)
            
            if user_data:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —á–∏—Å–ª–∞
                set_state(chat_id, UserState.WAITING_MAGIC_NUMBER, {
                    'spread_type': spread_type,
                    'name': user_data['name'],
                    'age': user_data['age']
                })
                
                await query.edit_message_text(
                    f"üîÆ –ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {user_data['name']}!\n\n"
                    f"üé¥ –†–∞—Å–∫–ª–∞–¥: {spread_name}\n"
                    f"üë§ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n\n"
                    "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ—ë–º –≤–æ–ø—Ä–æ—Å–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –º–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999:"
                )
                
                logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} ({user_data['name']}) –ø–µ—Ä–µ—à—ë–ª –∫ –º–∞–≥–∏—á–µ—Å–∫–æ–º—É —á–∏—Å–ª—É")
            else:
                # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
                    reply_markup=back_button("back_to_main")
                )
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            set_state(chat_id, UserState.WAITING_NAME, {'spread_type': spread_type})
            
            await query.edit_message_text(
                f"‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¢–∞—Ä–æ!\n\n"
                f"üé¥ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å–∫–ª–∞–¥: {spread_name}\n\n"
                "–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤–∞—Å –ª—É—á—à–µ.\n\n"
                "üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
            )
            
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ {spread_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_spread_selection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.callback_query.message.chat.id}: {e}")
        try:
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å–∫–ª–∞–¥–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:",
                reply_markup=main_menu()
            )
        except Exception:
            pass


async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –æ –±–æ—Ç–µ
    
    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    help_text = (
        "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É '–õ–∏—á–Ω—ã–π –¢–∞—Ä–æ–ª–æ–≥':\n\n"
        "üîÆ –ë–æ—Ç —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã –∫–∞—Ä—Ç –¢–∞—Ä–æ —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
        "‚ú® –î–æ—Å—Ç—É–ø–Ω–æ 7 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n"
        "üéØ –ö–∞–∂–¥—ã–π —Ä–∞—Å–∫–ª–∞–¥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n\n"
        "üí´ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞\n"
        "2. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
        "3. –í–≤–µ–¥–∏—Ç–µ –º–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π\n\n"
        "üåü –í—Å–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ\n"
        "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ä—Ç –¢–∞—Ä–æ."
    )
    
    query = update.callback_query
    await query.edit_message_text(
        text=help_text,
        reply_markup=back_button("back_to_main")
    )


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    
    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        query = update.callback_query
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await query.answer()
        
        callback_data = query.data
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ callback_data
        if callback_data == "back_to_main" or callback_data == "main_menu":
            await handle_main_menu(update, context)
        elif callback_data == "spreads_list":
            await handle_spreads_list(update, context)
        elif callback_data == "help":
            await handle_help(update, context)
        elif callback_data.startswith("spread_"):
            await handle_spread_selection(update, context)
        elif callback_data.startswith("rate_"):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ (rate_1, rate_2, etc.)
            feedback_system = get_feedback_system()
            await feedback_system.handle_rating(update, context)
        elif callback_data == "feedback_comment":
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            feedback_system = get_feedback_system()
            await feedback_system.request_comment(update, context)
        elif callback_data == "feedback_cancel":
            # –û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            feedback_system = get_feedback_system()
            await feedback_system.cancel_feedback(update, context)
        elif callback_data.startswith("feedback_"):
            await handle_feedback(update, context)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
            await query.edit_message_text(
                text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                reply_markup=back_button("back_to_main")
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
        try:
            query = update.callback_query
            await query.edit_message_text(
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start",
                reply_markup=back_button("back_to_main")
            )
        except Exception:
            pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    –ù–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω—É–∂–Ω–æ–º—É —ç—Ç–∞–ø—É —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        chat_id = update.effective_chat.id
        current_state = get_state(chat_id)
        
        # –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –Ω—É–∂–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if current_state == UserState.WAITING_NAME:
            await process_name(update, context)
        elif current_state == UserState.WAITING_BIRTHDATE:
            await process_birthdate(update, context)
        elif current_state == UserState.WAITING_MAGIC_NUMBER:
            await process_magic_number(update, context)
        elif current_state == UserState.WAITING_PRELIMINARY_ANSWERS:
            await process_preliminary_answers(update, context)
        elif current_state == UserState.WAITING_LLM_QUESTIONS:
            await process_llm_questions(update, context)
        elif current_state == UserState.WAITING_COMMENT:
            feedback_system = get_feedback_system()
            await feedback_system.handle_comment(update, context)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ IDLE –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await update.message.reply_text(
                "‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
                "üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu()
        )


async def process_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        chat_id = update.effective_chat.id
        user_input = update.message.text.strip()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–≤—ë–ª –∏–º—è: {user_input}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–º—è
        is_valid, result = validate_name(user_input)
        
        if not is_valid:
            # –ò–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
            await update.message.reply_text(
                f"‚ùå {result}\n\n"
                "üë§ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
            )
            logger.info(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {result}")
            return
        
        # –ò–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
        update_data(chat_id, 'name', result)
        set_state(chat_id, UserState.WAITING_BIRTHDATE)
        
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {result}!\n\n"
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990):"
        )
        
        logger.info(f"–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {result}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_name –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_chat.id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )


async def process_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        chat_id = update.effective_chat.id
        user_input = update.message.text.strip()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–≤—ë–ª –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è: {user_input}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        is_valid, result = validate_birthdate(user_input)
        
        if not is_valid:
            # –î–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
            await update.message.reply_text(
                f"‚ùå {result}\n\n"
                "üìÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990):"
            )
            logger.info(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {result}")
            return
        
        # –î–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–∞–≥–∏—á–µ—Å–∫–æ–º—É —á–∏—Å–ª—É
        session_data = get_user_data(chat_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        success = save_user(chat_id, session_data['name'], result['date'])
        
        if not success:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ /start"
            )
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
        update_data(chat_id, 'birthdate', result['date'])
        update_data(chat_id, 'age', result['age'])
        set_state(chat_id, UserState.WAITING_MAGIC_NUMBER)
        
        await update.message.reply_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {result['age']} –ª–µ—Ç.\n\n"
            "üîÆ –¢–µ–ø–µ—Ä—å —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ—ë–º –≤–æ–ø—Ä–æ—Å–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –º–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999:"
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –≤–æ–∑—Ä–∞—Å—Ç: {result['age']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_birthdate –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_chat.id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )


async def process_magic_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        chat_id = update.effective_chat.id
        user_input = update.message.text.strip()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤–≤—ë–ª –º–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ: {user_input}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ
        is_valid, result = validate_magic_number(user_input)
        
        if not is_valid:
            # –ß–∏—Å–ª–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
            await update.message.reply_text(
                f"‚ùå {result}\n\n"
                "üîÆ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –º–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999:"
            )
            logger.info(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {result}")
            return
        
        # –ß–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        session_data = get_user_data(chat_id)
        spread_type = session_data.get('spread_type')
        magic_number = result
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
        update_data(chat_id, 'magic_number', magic_number)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞
        spread_config_type = SPREAD_MAPPING.get(spread_type, spread_type)
        questions = get_questions_for_spread(spread_config_type)
        
        if questions and len(questions.questions) > 0:
            # –ï—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –Ω–∞—á–∏–Ω–∞–µ–º –∏—Ö –∑–∞–¥–∞–≤–∞—Ç—å
            update_data(chat_id, 'questions', questions)
            update_data(chat_id, 'current_question', 0)
            update_data(chat_id, 'preliminary_answers', [])
            set_state(chat_id, UserState.WAITING_PRELIMINARY_ANSWERS)
            
            first_question = questions.questions[0]
            await update.message.reply_text(
                f"‚úÖ –ú–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ {magic_number} –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                f"üé¥ {questions.name}\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è: {questions.estimated_time}\n\n"
                "–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n"
                f"**{first_question.text}**\n\n"
                f"üí° {first_question.hint}",
                parse_mode='Markdown'
            )
            
            logger.info(f"–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}, —Ä–∞—Å–∫–ª–∞–¥ {spread_type}")
        else:
            # –ù–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ LLM –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            await start_llm_interpretation(update, context, chat_id, session_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_magic_number –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_chat.id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∏—Å–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )


async def process_preliminary_answers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    
    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        chat_id = update.effective_chat.id
        user_input = update.message.text.strip()
        session_data = get_user_data(chat_id)
        
        questions = session_data.get('questions')
        current_question_index = session_data.get('current_question', 0)
        preliminary_answers = session_data.get('preliminary_answers', [])
        
        if not questions or current_question_index >= len(questions.questions):
            # –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            await start_llm_interpretation(update, context, chat_id, session_data)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç
        current_question = questions.questions[current_question_index]
        preliminary_answers.append({
            'question_id': current_question.id,
            'question_text': current_question.text,
            'answer': user_input,
            'expected_length': current_question.expected_length
        })
        
        update_data(chat_id, 'preliminary_answers', preliminary_answers)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å {current_question_index + 1}: {user_input[:50]}...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        next_question_index = current_question_index + 1
        
        if next_question_index < len(questions.questions):
            # –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
            update_data(chat_id, 'current_question', next_question_index)
            
            next_question = questions.questions[next_question_index]
            await update.message.reply_text(
                f"‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"‚ùì –í–æ–ø—Ä–æ—Å {next_question_index + 1} –∏–∑ {len(questions.questions)}:\n\n"
                f"**{next_question.text}**\n\n"
                f"üí° {next_question.hint}",
                parse_mode='Markdown'
            )
        else:
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!\n\n"
                "üé® –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥..."
            )
            
            await start_llm_interpretation(update, context, chat_id, session_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_preliminary_answers –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_chat.id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:",
            reply_markup=main_menu()
        )


async def finalize_spread_generation(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   chat_id: int, session_data: dict, 
                                   spread_type: str, magic_number: int) -> None:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å–∫–ª–∞–¥
    
    :param update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    :param chat_id: ID —á–∞—Ç–∞
    :param session_data: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    :param spread_type: –¢–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
    :param magic_number: –ú–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ
    """
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
        update_last_spread(chat_id)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        reset_to_idle(chat_id, keep_data=False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ª–∏ –¥–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥
        if spread_type in IMPLEMENTED_SPREADS:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ {spread_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            await perform_spread(update, context, spread_type, magic_number)
        else:
            # –î–ª—è –Ω–µ–≥–æ—Ç–æ–≤—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            spread_name = SPREAD_NAMES.get(spread_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥')
            
            await update.message.reply_text(
                f"‚ú® –í–∞—à–µ –º–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ {magic_number} –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
                f"üé¥ –†–∞—Å–∫–ª–∞–¥: {spread_name}\n"
                f"üë§ –î–ª—è: {session_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                "üîß –≠—Ç–æ—Ç —Ä–∞—Å–∫–ª–∞–¥ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤:",
                reply_markup=main_menu()
            )
            
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ {spread_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ finalize_spread_generation –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:",
            reply_markup=main_menu()
        )


async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        query = update.callback_query
        chat_id = query.message.chat.id
        feedback_type = query.data.replace("feedback_", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        session_data = get_user_data(chat_id)
        interpretation_text = session_data.get('interpretation_text', '')
        
        feedback_data = {
            'chat_id': chat_id,
            'feedback': feedback_type,
            'spread_type': session_data.get('spread_type'),
            'interpretation_length': len(interpretation_text),
            'timestamp': time.time()
        }
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏–ª–∏ —Ñ–∞–π–ª
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {feedback_type}")
        
        # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        feedback_messages = {
            'excellent': '‚≠êÔ∏è –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å!',
            'good': 'üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ë—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—è –µ—â—ë –ª—É—á—à–µ!', 
            'poor': 'üëé –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å. –ë—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π.',
            'bad': '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª –æ–∂–∏–¥–∞–Ω–∏–π. –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ!'
        }
        
        message = feedback_messages.get(feedback_type, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!')
        
        await query.edit_message_text(
            f"{message}\n\n‚ú® –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –Ω–æ–≤—ã–º–∏ —Ä–∞—Å–∫–ª–∞–¥–∞–º–∏!",
            reply_markup=main_menu()
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        reset_to_idle(chat_id, keep_data=False)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")


# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
handle_callback_query = handle_callback