"""
–î–≤–∏–∂–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ
"""
import os
from typing import List, Dict, Optional, Tuple
from PIL import Image, ImageDraw
import io


class ImageCache:
    """–ö—ç—à –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç –∏ —Ñ–æ–Ω–æ–≤"""
    
    def __init__(self):
        self._backgrounds = {}
        self._cards = {}
    
    def get_background(self, background_id: int) -> Optional[Image.Image]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ–Ω –∏–∑ –∫—ç—à–∞"""
        return self._backgrounds.get(background_id)
    
    def cache_background(self, background_id: int, image: Image.Image):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ–Ω –≤ –∫—ç—à"""
        self._backgrounds[background_id] = image
    
    def get_card(self, card_path: str) -> Optional[Image.Image]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫—ç—à–∞"""
        return self._cards.get(card_path)
    
    def cache_card(self, card_path: str, image: Image.Image):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –≤ –∫—ç—à"""
        self._cards[card_path] = image
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"""
        self._backgrounds.clear()
        self._cards.clear()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
_image_cache = ImageCache()


def load_background(background_id: int, backgrounds_dir: str = None) -> Image.Image:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–∞ –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞
    
    :param background_id: –ù–æ–º–µ—Ä —Ñ–æ–Ω–∞ (1-7)
    :param backgrounds_dir: –ü–∞–ø–∫–∞ —Å —Ñ–æ–Ω–∞–º–∏
    :return: PIL Image –æ–±—ä–µ–∫—Ç —Ñ–æ–Ω–∞
    """
    if not 1 <= background_id <= 7:
        raise ValueError(f"background_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 7, –ø–æ–ª—É—á–µ–Ω: {background_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached = _image_cache.get_background(background_id)
    if cached is not None:
        return cached.copy()
    
    if backgrounds_dir is None:
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        backgrounds_dir = os.path.join(project_root, 'assets', 'backgrounds for spreads')
    
    background_file = f"back{background_id}.png"
    background_path = os.path.join(backgrounds_dir, background_file)
    
    if not os.path.exists(background_path):
        raise FileNotFoundError(f"–§–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {background_path}")
    
    try:
        background = Image.open(background_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ–Ω–∞
        if background.size != (1024, 1024):
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–∞–∑–º–µ—Ä —Ñ–æ–Ω–∞ {background.size}, –æ–∂–∏–¥–∞–ª—Å—è (1024, 1024)")
        
        # –ö—ç—à–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é
        _image_cache.cache_background(background_id, background.copy())
        return background
        
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞ {background_file}: {e}")


def load_card_image(card_path: str) -> Image.Image:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
    
    :param card_path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–∞—Ä—Ç—ã
    :return: PIL Image –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached = _image_cache.get_card(card_path)
    if cached is not None:
        return cached.copy()
    
    if not os.path.exists(card_path):
        raise FileNotFoundError(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {card_path}")
    
    try:
        card = Image.open(card_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
        if card.size != (350, 600):
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã {card.size}, –æ–∂–∏–¥–∞–ª—Å—è (350, 600)")
        
        # –ö—ç—à–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é
        _image_cache.cache_card(card_path, card.copy())
        return card
        
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã {os.path.basename(card_path)}: {e}")


def scale_image(image: Image.Image, scale_factor: float) -> Image.Image:
    """
    –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    :param image: PIL Image –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    :param scale_factor: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    :return: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    """
    if scale_factor <= 0:
        raise ValueError(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0, –ø–æ–ª—É—á–µ–Ω: {scale_factor}")
    
    original_width, original_height = image.size
    new_width = int(original_width * scale_factor)
    new_height = int(original_height * scale_factor)
    
    if new_width <= 0 or new_height <= 0:
        raise ValueError(f"–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {new_width}x{new_height}")
    
    return image.resize((new_width, new_height), Image.LANCZOS)


def rotate_image(image: Image.Image, rotation: float) -> Image.Image:
    """
    –ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
    
    :param image: PIL Image –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
    :param rotation: –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö (–ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ)
    :return: –ü–æ–≤—ë—Ä–Ω—É—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
    """
    if rotation == 0:
        return image
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    if image.mode != 'RGBA':
        image = image.convert('RGBA')
    
    # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
    # fillcolor=(0,0,0,0) = –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
    rotated = image.rotate(-rotation, expand=True, fillcolor=(0, 0, 0, 0))
    
    return rotated


def place_card_on_background(
    background: Image.Image,
    card: Image.Image,
    x: int,
    y: int,
    rotation: float = 0,
    scale: float = 1.0
) -> Image.Image:
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Ñ–æ–Ω–µ
    
    :param background: –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    :param card: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    :param x: X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã (–≤ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏)
    :param y: Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã (–≤ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏)
    :param rotation: –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç—ã –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    :param scale: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    :return: –§–æ–Ω —Å —Ä–∞–∑–º–µ—â—ë–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π
    """
    # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é —Ñ–æ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    result = background.copy()
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
    if scale != 1.0:
        card = scale_image(card, scale)
    
    # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if rotation != 0:
        card = rotate_image(card, rotation)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–æ–Ω–∞
    # –†–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å 512x512 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å (256, 256) –Ω–∞ —Ñ–æ–Ω–µ 1024x1024
    abs_x = x + 256  # –°–¥–≤–∏–≥ –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ –ø–æ X
    abs_y = y + 256  # –°–¥–≤–∏–≥ –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ –ø–æ Y
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª –∫–∞—Ä—Ç—ã)
    card_width, card_height = card.size
    paste_x = abs_x - card_width // 2   # x - —ç—Ç–æ —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
    paste_y = abs_y - card_height // 2  # y - —ç—Ç–æ —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Ñ–æ–Ω–µ
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∞ —É–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —Ñ–æ–Ω–µ
        if paste_x < 0 or paste_y < 0 or paste_x + card_width > 1024 or paste_y + card_height > 1024:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∫–∞—Ä—Ç–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ñ–æ–Ω–∞")
            print(f"   –ü–æ–∑–∏—Ü–∏—è: ({paste_x}, {paste_y}), —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_width}x{card_height}")
        
        # –ï—Å–ª–∏ —É –∫–∞—Ä—Ç—ã –µ—Å—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (–∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        if card.mode in ('RGBA', 'LA') or 'transparency' in card.info:
            result.paste(card, (paste_x, paste_y), card)
        else:
            result.paste(card, (paste_x, paste_y))
            
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({paste_x}, {paste_y}): {e}")
    
    return result


def generate_spread_image(
    background_id: int,
    cards: List[Dict],
    layout_config: Dict
) -> Image.Image:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞
    
    :param background_id: –ù–æ–º–µ—Ä —Ñ–æ–Ω–∞ (1-7)
    :param cards: –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –æ—Ç card_manager
    :param layout_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
    :return: PIL Image –æ–±—ä–µ–∫—Ç –≥–æ—Ç–æ–≤–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
    """
    if not cards:
        raise ValueError("–°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    if not layout_config:
        raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    positions = layout_config.get('positions', [])
    scale_factor = layout_config.get('scale', 1.0)
    
    if len(cards) != len(positions):
        raise ValueError(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç ({len(cards)}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–∑–∏—Ü–∏–π ({len(positions)})")
    
    print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–∫–ª–∞–¥: {len(cards)} –∫–∞—Ä—Ç, —Ñ–æ–Ω {background_id}, scale {scale_factor}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω
    try:
        background = load_background(background_id)
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞: {e}")
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ —Ñ–æ–Ω–µ
    result = background
    
    for i, (card, position) in enumerate(zip(cards, positions)):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–∞—Ä—Ç—ã
            try:
                from .card_manager import TarotDeck
            except ImportError:
                from card_manager import TarotDeck
            deck = TarotDeck()  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∫–∞—Ä—Ç–µ
            card_path = deck.get_card_image_path(card)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
            card_image = load_card_image(card_path)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            x = position.get('x', 256)
            y = position.get('y', 256)
            rotation = position.get('rotation', 0)
            
            print(f"   –†–∞–∑–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É {i+1}: {card['name']} –Ω–∞ ({x}, {y}), –ø–æ–≤–æ—Ä–æ—Ç {rotation}¬∞")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Ñ–æ–Ω–µ
            result = place_card_on_background(
                result, card_image, x, y, rotation, scale_factor
            )
            
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã {i+1} ({card.get('name', 'unknown')}): {e}")
    
    print(f"‚úÖ –†–∞—Å–∫–ª–∞–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    return result


def save_image_optimized(image: Image.Image, file_path: str, max_size_mb: float = 2.0) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    
    :param image: PIL Image –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    :param file_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    :param max_size_mb: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ú–ë
    :return: –†–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
    """
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    quality_levels = [95, 90, 85, 80, 75, 70]
    
    for quality in quality_levels:
        # –°–æ–∑–¥–∞—ë–º –±—É—Ñ–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        buffer = io.BytesIO()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è JPEG —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
        save_image = image
        if image.mode in ('RGBA', 'P'):
            # –°–æ–∑–¥–∞—ë–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            background = Image.new('RGB', image.size, (255, 255, 255))
            if image.mode == 'P':
                image = image.convert('RGBA')
            background.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)
            save_image = background
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        format_type = 'PNG' if file_path.lower().endswith('.png') else 'JPEG'
        
        if format_type == 'PNG':
            save_image.save(buffer, format='PNG', optimize=True)
        else:
            save_image.save(buffer, format='JPEG', quality=quality, optimize=True)
        
        file_size = buffer.tell()
        max_bytes = max_size_mb * 1024 * 1024
        
        if file_size <= max_bytes or quality == quality_levels[-1]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            buffer.seek(0)
            with open(file_path, 'wb') as f:
                f.write(buffer.getvalue())
            
            size_mb = file_size / (1024 * 1024)
            print(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
            print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.2f} –ú–ë (–∫–∞—á–µ—Å—Ç–≤–æ: {quality if format_type == 'JPEG' else 'PNG'})")
            return file_size
        
        buffer.close()
    
    return 0


# –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def test_single_card():
    """–¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ —Å –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ–π"""
    print("üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ–π...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        try:
            from .card_manager import TarotDeck
        except ImportError:
            from card_manager import TarotDeck
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–æ–¥—É –∏ –ø–æ–ª—É—á–∞–µ–º The Fool
        deck = TarotDeck()
        all_cards = deck.cards
        
        # –ò—â–µ–º The Fool
        the_fool = None
        for card in all_cards:
            if card['name'] == 'The Fool':
                the_fool = card
                break
        
        if the_fool is None:
            raise ValueError("–ö–∞—Ä—Ç–∞ 'The Fool' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–ª–æ–¥–µ")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
        test_layout = {
            'scale': 0.4,
            'positions': [
                {'x': 256, 'y': 256, 'rotation': 0}  # –¶–µ–Ω—Ç—Ä —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏
            ]
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result_image = generate_spread_image(
            background_id=1,
            cards=[the_fool],
            layout_config=test_layout
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_path = "test_single_card.png"
        file_size = save_image_optimized(result_image, output_path)
        
        return output_path, file_size
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise


def clear_image_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    global _image_cache
    _image_cache.clear()
    print("üßπ –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω")


class ImageGenerator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ
    –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π generate_spread_image –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        pass
    
    def generate_spread_image(self, background_id: int, cards: List[Dict], 
                            positions: List[Dict], scale: float) -> bytes:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ –±–∞–π—Ç—ã
        
        :param background_id: –ù–æ–º–µ—Ä —Ñ–æ–Ω–∞ (1-7)
        :param cards: –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –æ—Ç card_manager
        :param positions: –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∫–∞—Ä—Ç
        :param scale: –ú–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç
        :return: –ë–∞–π—Ç—ã PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        layout_config = {
            'positions': positions,
            'scale': scale
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = generate_spread_image(background_id, cards, layout_config)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã PNG
        buffer = io.BytesIO()
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ RGB –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if image.mode in ('RGBA', 'P'):
            # –°–æ–∑–¥–∞—ë–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
            background = Image.new('RGB', image.size, (255, 255, 255))
            if image.mode == 'P':
                image = image.convert('RGBA')
            background.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)
            image = background
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        image.save(buffer, format='PNG', optimize=True)
        
        return buffer.getvalue()


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è image_generator.py")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ–Ω–∞
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞...")
        bg = load_background(1)
        print(f"   ‚úÖ –§–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {bg.size}, —Ä–µ–∂–∏–º: {bg.mode}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç—ã
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã...")
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        card_path = os.path.join(project_root, 'assets', 'cards', 'm00.jpg')
        card = load_card_image(card_path)
        print(f"   ‚úÖ –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {card.size}, —Ä–µ–∂–∏–º: {card.mode}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è...")
        scaled = scale_image(card, 0.5)
        print(f"   ‚úÖ –ö–∞—Ä—Ç–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∞: {card.size} ‚Üí {scaled.size}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞...")
        rotated = rotate_image(card, 45)
        print(f"   ‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–≤—ë—Ä–Ω—É—Ç–∞ –Ω–∞ 45¬∞: {card.size} ‚Üí {rotated.size}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        print("\n5Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        test_path, test_size = test_single_card()
        
        print(f"\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {test_size / 1024:.1f} –ö–ë")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()