"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø LLM —Å–µ—Å—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import re
import json
import logging
from typing import Dict, List, Optional, Tuple
from .openrouter_client import MessageContext
from .prompt_manager import PromptManager
from .config import load_config

logger = logging.getLogger(__name__)


class InterpretationStage:
    """–≠—Ç–∞–ø—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏"""
    SYSTEM = "system"
    SPREAD_CONTEXT = "spread_context" 
    PSYCHOLOGICAL_ANALYSIS = "psychological_analysis"
    CONTEXT_ANALYSIS = "context_analysis"
    SYNTHESIS = "synthesis"
    FINAL_RESPONSE = "final_response"


class LLMSession:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø LLM —Å–µ—Å—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π:
    - –í—Å–µ –ø—Ä–æ–º–ø—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –µ–¥–∏–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    - –û–î–ò–ù —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ü–µ
    - LLM –≤–∏–¥–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤–∫–ª—é—á–∞—è –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    """
    
    def __init__(self, prompt_manager: PromptManager, model_name: str = None):
        self.prompt_manager = prompt_manager
        self.config = load_config()
        
        # –°–æ–∑–¥–∞–µ–º MessageContext —Å mode=2 (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!)
        self.context = MessageContext(task_prompt=None)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –±–µ—Ä–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if model_name is None:
            model_name = self.config.get("model_name", "deepseek/deepseek-chat-v3-0324:free")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        self.model_name = model_name
        self.api_key = self.config.get("openrouter_api_key")
        self.max_tokens = self.config.get("max_response_tokens", 8000)
        self.temperature = self.config.get("temperature", 0.3)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        self.current_stage = None
        self.user_data = {}
        self.spread_data = {}
        self.generated_questions = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –æ–±—ä–µ–∫—Ç agent –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        class CompatibilityAgent:
            def __init__(self, model_name: str):
                self.model_name = model_name
        
        self.agent = CompatibilityAgent(model_name)
        
    def setup_spread(self, spread_type: str, selected_cards: List[Dict], 
                    spread_config: Dict, user_name: str, user_age: int, 
                    magic_number: int):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–∞"""
        self.spread_data = {
            'spread_type': spread_type,
            'selected_cards': selected_cards,
            'spread_config': spread_config,
            'user_name': user_name,
            'user_age': user_age,
            'magic_number': magic_number
        }
        
        self.user_data = {
            'name': user_name,
            'age': user_age,
            'magic_number': magic_number
        }
    
    def add_spread_context(self, spread_type: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ —Å–µ—Å—Å–∏—é"""
        context_prompt = self.prompt_manager.get_spread_context_prompt(spread_type)
        self.context.add_user_message(context_prompt)
        self.current_stage = InterpretationStage.SPREAD_CONTEXT
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å–∫–ª–∞–¥–∞: {spread_type}")
    
    def build_complete_context(self, preliminary_answers: List[str], 
                              additional_answers: List[str] = None) -> bool:
        """
        –ö–õ–Æ–ß–ï–í–û–ô –ú–ï–¢–û–î: –°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ –í–°–ï–ú–ò –ø—Ä–æ–º–ø—Ç–∞–º–∏
        –≠—Ç–æ –∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ LLM_algorithm.md!
        """
        try:
            # 1. –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞ (01_system_persona.md)
            system_prompt = self.prompt_manager.get_system_persona(
                name=self.user_data['name'],
                age=self.user_data['age']
            )
            self.context = MessageContext(task_prompt=system_prompt)
            logger.info("1Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
            
            # 2. –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å–∫–ª–∞–¥–∞ (02_*_context.md)
            spread_type = self.spread_data.get('spread_type', '')
            spread_prompt = self.prompt_manager.get_spread_context(
                spread_type=spread_type,
                selected_cards=self.spread_data['selected_cards'],
                positions=self.spread_data['spread_config'].get('card_meanings', [])
            )
            self.context.add_user_message(spread_prompt)
            logger.info(f"2Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å–∫–ª–∞–¥–∞: {spread_type}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if preliminary_answers:
                answers_text = "\\n".join([f"{i+1}. {answer}" for i, answer in enumerate(preliminary_answers)])
                self.context.add_user_message(f"–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\\n{answers_text}")
                logger.info("üìù –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
            
            # 3. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –≤–æ–ø—Ä–æ—Å—ã (03_psychological_analysis_questions.md) 
            analysis_prompt = self.prompt_manager.get_psychological_analysis_prompt(
                user_answers=preliminary_answers or []
            )
            self.context.add_user_message(analysis_prompt)
            logger.info("3Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if additional_answers:
                additional_text = "\\n".join([f"{i+1}. {answer}" for i, answer in enumerate(additional_answers)])
                self.context.add_user_message(f"–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ –ù–ê –£–¢–û–ß–ù–Ø–Æ–©–ò–ï –í–û–ü–†–û–°–´:\\n{additional_text}")
                logger.info("üìù –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
            
            # 4. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∫–∞—Ä—Ç (04_context_analysis_and_card_interpretation.md)
            context_analysis_prompt = self.prompt_manager.get_context_analysis_prompt()
            self.context.add_user_message(context_analysis_prompt)
            logger.info("4Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
            
            # 5. –ì–ª—É–±–æ–∫–∏–π —Å–∏–Ω—Ç–µ–∑ (05_deep_synthesis_and_story_planning.md)
            synthesis_prompt = self.prompt_manager.get_synthesis_prompt()
            self.context.add_user_message(synthesis_prompt)
            logger.info("5Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç —Å–∏–Ω—Ç–µ–∑–∞")
            
            # 6. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (06_final_user_response.md)
            final_prompt = self.prompt_manager.get_final_response_prompt()
            self.context.add_user_message(final_prompt)
            logger.info("6Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    async def generate_complete_interpretation(self) -> Optional[str]:
        """
        –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –∫ LLM —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º!
        –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - LLM –≤–∏–¥–∏—Ç –í–°–ï –ø—Ä–æ–º–ø—Ç—ã –≤–∫–ª—é—á–∞—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏!
        """
        try:
            messages = self.context.get_message_history()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ 
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            full_context = "\\n".join([msg['content'][0]['text'] for msg in messages])
            has_brevity = "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏" in full_context
            logger.info(f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {has_brevity}")
            
            from .openrouter_client import send_request
            response = await send_request(
                messages=messages,
                model=self.model_name,
                api_key=self.api_key,
                max_tokens=self.max_tokens,
                temperature=self.temperature
            )
            
            self.current_stage = InterpretationStage.FINAL_RESPONSE
            logger.info("üéØ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –û–î–ò–ù –∑–∞–ø—Ä–æ—Å!")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
            cleaned_response = self._extract_final_interpretation(response)
            return cleaned_response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
            return None
    
    def _extract_final_interpretation(self, response: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM"""
        try:
            # –°–ø–æ—Å–æ–± 1: –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã [INTERPRETATION_START] –∏ [INTERPRETATION_END]
            interpretation_match = re.search(r'\\[INTERPRETATION_START\\](.*?)\\[INTERPRETATION_END\\]', 
                                           response, re.DOTALL | re.IGNORECASE)
            if interpretation_match:
                cleaned = interpretation_match.group(1).strip()
                logger.info("‚úÖ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º")
                return cleaned
            
            # –°–ø–æ—Å–æ–± 2: –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            lines = response.split('\\n')
            interpretation_lines = []
            capturing = False
            
            for line in lines:
                if 'INTERPRETATION_START' in line or capturing:
                    capturing = True
                    if 'INTERPRETATION_END' in line:
                        break
                    interpretation_lines.append(line)
            
            if interpretation_lines:
                result = '\\n'.join(interpretation_lines).strip()
                # –û—á–∏—â–∞–µ–º –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
                result = re.sub(r'\\[INTERPRETATION_(START|END)\\]', '', result).strip()
                logger.info("‚úÖ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞ –ø–æ –±–ª–æ–∫–∞–º")
                return result
            
            # –°–ø–æ—Å–æ–± 3: –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000-2000 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
            if len(response) > 1000:
                result = response[-2000:].strip()
                logger.info("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤–∑—è—Ç–∞ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫")
                return result
            
            # –°–ø–æ—Å–æ–± 4: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç")
            return response.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
            return response.strip()
    
    def get_context_debug_info(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
        messages = self.context.get_message_history()
        full_context = "\\n".join([msg['content'][0]['text'] for msg in messages])
        
        return {
            'message_count': len(messages),
            'total_length': len(full_context),
            'has_brevity_instruction': '–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏' in full_context,
            'has_system_persona': '01_system_persona' in full_context,
            'has_spread_context': '02_' in full_context and '_context' in full_context,
            'context_preview': full_context[:500] + '...' if len(full_context) > 500 else full_context
        }
    
    def _extract_questions_from_response(self, response: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)"""
        try:
            questions = []
            
            # –°–ø–æ—Å–æ–± 1: –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã [QUESTIONS_START] –∏ [QUESTIONS_END]
            questions_match = re.search(r'\[QUESTIONS_START\](.*?)\[QUESTIONS_END\]', response, re.DOTALL | re.IGNORECASE)
            if questions_match:
                questions_block = questions_match.group(1).strip()
                # –ü–∞—Ä—Å–∏–º Q1:, Q2: —Ñ–æ—Ä–º–∞—Ç
                q_matches = re.findall(r'Q\d+:\s*(.+?)(?=Q\d+:|$)', questions_block, re.DOTALL)
                questions.extend([q.strip() for q in q_matches if self._validate_question(q.strip())])
            
            # –°–ø–æ—Å–æ–± 2: –ò—â–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç <QUESTIONS>
            if not questions:
                questions_match = re.search(r'<QUESTIONS>(.*?)</QUESTIONS>', response, re.DOTALL)
                if questions_match:
                    questions_block = questions_match.group(1).strip()
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                    for line in questions_block.split('\n'):
                        line = line.strip()
                        if re.match(r'^\d+\.', line):  # –°—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "1. –í–æ–ø—Ä–æ—Å"
                            question = re.sub(r'^\d+\.\s*', '', line)
                            if self._validate_question(question):
                                questions.append(question)
            
            # –°–ø–æ—Å–æ–± 3: –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            if not questions:
                question_patterns = [
                    r'–í–æ–ø—Ä–æ—Å\s+\d+:\s*(.+?)(?=–í–æ–ø—Ä–æ—Å\s+\d+:|$)',
                    r'\d+\.\s*(.+?\?)(?=\d+\.|$)',  # –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
                    r'[-‚Ä¢]\s*(.+?\?)(?=[-‚Ä¢]|$)'      # –°–ø–∏—Å–æ–∫ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
                ]
                
                for pattern in question_patterns:
                    matches = re.findall(pattern, response, re.DOTALL | re.IGNORECASE)
                    if matches:
                        questions.extend([q.strip() for q in matches if self._validate_question(q.strip())])
                        break
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            if questions:
                questions = self._validate_questions_count(questions)
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(questions)} –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM")
            
            return questions
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return []
    
    def _validate_question(self, question: str) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        if not question or len(question.strip()) < 10:
            return False
        if len(question) > 500:
            return False
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        if '?' not in question:
            return False
        return True
    
    def _validate_questions_count(self, questions: List[str]) -> List[str]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∏–ø—É —Ä–∞—Å–∫–ª–∞–¥–∞"""
        spread_type = self.spread_data.get('spread_type', '')
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤
        max_questions = {
            'single_card': 2,
            'three_cards': 3, 
            'horseshoe': 4,
            'love_triangle': 5,
            'celtic_cross': 6,
            'week_forecast': 4,
            'year_wheel': 5
        }
        
        limit = max_questions.get(spread_type, 3)
        return questions[:limit]
    
    # === –ê–î–ê–ü–¢–ï–†–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –ö–û–î–û–ú ===
    
    async def run_full_interpretation(self, user_data: Dict, spread_data: Dict, 
                                    preliminary_answers: List[str]) -> Tuple[List[str], Optional[str]]:
        """
        –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å llm_integration.py
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–≤–æ–ø—Ä–æ—Å—ã, None) –µ—Å–ª–∏ –Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è, –∏–ª–∏ ([], –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è) –µ—Å–ª–∏ –≥–æ—Ç–æ–≤–æ
        """
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º spread –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        self.setup_spread(
            spread_type=spread_data['spread_type'],
            selected_cards=spread_data['cards'],
            spread_config={'card_meanings': ['–ü–æ–∑–∏—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞']},  # –ó–∞–≥–ª—É—à–∫–∞
            user_name=user_data['name'],
            user_age=user_data['age'],
            magic_number=1  # –ó–∞–≥–ª—É—à–∫–∞, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ session_data
        )
        
        # –≠–¢–ê–ü 1: –°–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        try:
            # 1. –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞ 
            system_prompt = self.prompt_manager.get_system_persona(
                name=self.user_data['name'],
                age=self.user_data['age']
            )
            self.context = MessageContext(task_prompt=system_prompt)
            
            # 2. –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å–∫–ª–∞–¥–∞
            spread_prompt = self.prompt_manager.get_spread_context(
                spread_type=spread_data['spread_type'],
                selected_cards=spread_data['cards'],
                positions=spread_data.get('positions', [])
            )
            self.context.add_user_message(spread_prompt)
            
            # 3. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if preliminary_answers:
                answers_text = "\\n".join([f"{i+1}. {answer}" for i, answer in enumerate(preliminary_answers)])
                self.context.add_user_message(f"–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\\n{answers_text}")
            
            # 4. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
            analysis_prompt = self.prompt_manager.get_psychological_analysis_prompt(
                user_answers=preliminary_answers or []
            )
            self.context.add_user_message(analysis_prompt)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã
            messages = self.context.get_message_history()
            from .openrouter_client import send_request
            response = await send_request(
                messages=messages,
                model=self.model_name,
                api_key=self.api_key,
                max_tokens=self.max_tokens,
                temperature=self.temperature
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
            questions = self._extract_questions_from_response(response)
            
            if questions:
                logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(questions)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
                self.generated_questions = questions
                return questions, None
            else:
                # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
                logger.info("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏")
                return [], None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return [], None
    
    async def continue_interpretation(self, additional_answers: List[str]) -> Optional[str]:
        """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        # –¢–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∏–º –ü–û–õ–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if additional_answers:
            answers_text = "\\n".join([f"{i+1}. {answer}" for i, answer in enumerate(additional_answers)])
            self.context.add_user_message(f"–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ –ù–ê –£–¢–û–ß–ù–Ø–Æ–©–ò–ï –í–û–ü–†–û–°–´:\\n{answers_text}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        try:
            # 5. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∫–∞—Ä—Ç
            context_analysis_prompt = self.prompt_manager.get_context_analysis_prompt()
            self.context.add_user_message(context_analysis_prompt)
            
            # 6. –ì–ª—É–±–æ–∫–∏–π —Å–∏–Ω—Ç–µ–∑
            synthesis_prompt = self.prompt_manager.get_synthesis_prompt()
            self.context.add_user_message(synthesis_prompt)
            
            # 7. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            final_prompt = self.prompt_manager.get_final_response_prompt()
            self.context.add_user_message(final_prompt)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
            messages = self.context.get_message_history()
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–≤–∫–ª—é—á–∞—è –¥–æ–ø. –æ—Ç–≤–µ—Ç—ã)")
            
            from .openrouter_client import send_request
            response = await send_request(
                messages=messages,
                model=self.model_name,
                api_key=self.api_key,
                max_tokens=self.max_tokens,
                temperature=self.temperature
            )
            
            logger.info("üéØ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
            interpretation = self._extract_final_interpretation(response)
            return interpretation
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
            return None
    
    async def add_question_answers(self, answers: List[str]):
        """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        # –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã 
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ build_complete_context, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.question_answers = answers
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {len(answers)} —à—Ç.")
        
    async def generate_context_analysis(self) -> bool:
        """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        # –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∞–Ω–∞–ª–∏–∑ —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ generate_complete_interpretation
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        logger.info("–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç —ç—Ç–æ)")
        return True
        
    async def generate_synthesis(self) -> bool:
        """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        # –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å–∏–Ω—Ç–µ–∑ —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ generate_complete_interpretation
        logger.info("–°–∏–Ω—Ç–µ–∑ (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç —ç—Ç–æ)")
        return True
        
    async def generate_final_interpretation(self) -> Optional[str]:
        """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        # –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
        return await self.generate_complete_interpretation()