"""
–í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
"""

import asyncio
import logging
from typing import Optional
from telegram import Message
from telegram.ext import ContextTypes
from src.simple_state import add_message_to_delete

logger = logging.getLogger(__name__)

class TarotProgressBar:
    """–í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å —Ç–∞—Ä–æ-—Ç–µ–º–∞—Ç–∏–∫–æ–π"""
    
    # –≠—Ç–∞–ø—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
    STAGES = {
        0: "üé¥ –†–∞—Å–∫–ª–∞–¥—ã–≤–∞—é –∫–∞—Ä—Ç—ã...",
        25: "üìñ –ß–∏—Ç–∞—é –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç...", 
        50: "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é...",
        75: "‚ú® –§–æ—Ä–º–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é...",
        100: "üîÆ –ì–æ—Ç–æ–≤–æ!"
    }
    
    def __init__(self, message: Message):
        self.message = message
        self.current_progress = 0
        self.is_cancelled = False
    
    def _generate_progress_visual(self, progress: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –≤ 2 —Ä–∞–∑–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        total_stars = 10  # –±—ã–ª–æ 20, —Å—Ç–∞–ª–æ 10
        filled_stars = int((progress / 100) * total_stars)
        empty_stars = total_stars - filled_stars
        
        # –°–æ–∑–¥–∞–µ–º –±–∞—Ä –∏–∑ –∑–≤–µ–∑–¥
        filled = "‚≠ê" * filled_stars
        empty = "‚òÜ" * empty_stars
        progress_bar = filled + empty
        
        return progress_bar
    
    def _format_progress_message(self, progress: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        stage_text = self.STAGES.get(progress, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        progress_visual = self._generate_progress_visual(progress)
        
        message = (
            f"üîÆ **–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞**\n\n"
            f"{progress_visual} {progress}%\n\n"
            f"{stage_text}"
        )
        
        return message
    
    async def update_progress(self, progress: int, delay: float = 0.5) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        
        :param progress: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
        :param delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ
        """
        if self.is_cancelled:
            return False
            
        if delay > 0:
            await asyncio.sleep(delay)
        
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = max(0, min(100, progress))
            self.current_progress = progress
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = self._format_progress_message(progress)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.message.edit_text(
                text=message_text,
                parse_mode='Markdown'
            )
            
            logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: {progress}%")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞: {e}")
            return False
    
    async def complete(self, delay: float = 1.0) -> bool:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        :param delay: –í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        """
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 100%
            await self.update_progress(100, delay=0)
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            if delay > 0:
                await asyncio.sleep(delay)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.message.delete()
            logger.info("–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —É–¥–∞–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞: {e}")
            return False
    
    async def cancel(self) -> bool:
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ
        """
        try:
            self.is_cancelled = True
            await self.message.delete()
            logger.info("–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –æ—Ç–º–µ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞: {e}")
            return False
    
    def is_complete(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        return self.current_progress >= 100


class InterpretationProgress:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ä–µ–∞–ª—å–Ω—ã–º —ç—Ç–∞–ø–∞–º"""
    
    def __init__(self, progress_bar: TarotProgressBar):
        self.progress_bar = progress_bar
        self.current_stage = 0
        self.update_context = None  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
        
    async def start_image_generation(self):
        """–≠—Ç–∞–ø 1: 0-25% - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞"""
        await self.progress_bar.update_progress(0)
        await asyncio.sleep(0.5)
        await self.progress_bar.update_progress(15)
        self.current_stage = 1
    
    async def complete_image_generation(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if self.current_stage == 1:
            await self.progress_bar.update_progress(25)
            await asyncio.sleep(0.3)
            self.current_stage = 2
    
    async def start_preparation(self):
        """–ù–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø: 0% - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–∞"""
        await self.progress_bar.update_progress(0)
        self.current_stage = 0
    
    async def complete_llm_questions_generation(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LLM –≤–æ–ø—Ä–æ—Å–æ–≤: 25%"""
        await self.progress_bar.update_progress(25)
        self.current_stage = 2
    
    async def cancel(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        await self.progress_bar.cancel()
    
    def set_update_context(self, update, context):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤"""
        self.update_context = (update, context)
    
    async def recreate_progress_bar(self, current_progress: int):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–Ω–∏–∑—É —á–∞—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏"""
        if not self.update_context:
            return False
            
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            await self.progress_bar.cancel()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–Ω–∏–∑—É —á–∞—Ç–∞
            update, context = self.update_context
            chat_id = update.effective_chat.id
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            progress_visual = self.progress_bar._generate_progress_visual(current_progress)
            stage_text = self.progress_bar.STAGES.get(current_progress, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
            
            message_text = (
                f"üîÆ **–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞**\\n\\n"
                f"{progress_visual} {current_progress}%\\n\\n"
                f"{stage_text}"
            )
            
            progress_message = await update.message.reply_text(
                message_text,
                parse_mode='Markdown'
            )
            
            # –¢—Ä–µ–∫–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            add_message_to_delete(chat_id, progress_message.message_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            self.progress_bar = TarotProgressBar(progress_message)
            self.progress_bar.current_progress = current_progress
            
            logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –≤–Ω–∏–∑—É —á–∞—Ç–∞ –¥–ª—è {current_progress}%")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞: {e}")
            return False
    
    async def start_context_analysis(self):
        """–≠—Ç–∞–ø 2: 25-50% - –ü—Ä–æ–º–ø—Ç 04 (–∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)"""
        if self.current_stage == 2:
            await self.progress_bar.update_progress(25)
            await asyncio.sleep(0.2)
            await self.progress_bar.update_progress(35)
    
    async def complete_context_analysis(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if self.current_stage == 2:
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–Ω–∏–∑—É –Ω–∞ 50%
            recreated = await self.recreate_progress_bar(50)
            if not recreated:
                await self.progress_bar.update_progress(50)
            await asyncio.sleep(0.3)
            self.current_stage = 3
    
    async def start_synthesis(self):
        """–≠—Ç–∞–ø 3: 50-75% - –ü—Ä–æ–º–ø—Ç 05 (—Å–∏–Ω—Ç–µ–∑)"""
        if self.current_stage == 3:
            await self.progress_bar.update_progress(50)
            await asyncio.sleep(0.2)
            await self.progress_bar.update_progress(60)
    
    async def complete_synthesis(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞"""
        if self.current_stage == 3:
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–Ω–∏–∑—É –Ω–∞ 75%
            recreated = await self.recreate_progress_bar(75)
            if not recreated:
                await self.progress_bar.update_progress(75)
            await asyncio.sleep(0.3)
            self.current_stage = 4
    
    async def start_final_interpretation(self):
        """–≠—Ç–∞–ø 4: 75-100% - –ü—Ä–æ–º–ø—Ç 06 (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è)"""
        if self.current_stage == 4:
            await self.progress_bar.update_progress(75)
            await asyncio.sleep(0.2)
            await self.progress_bar.update_progress(85)
    
    async def complete_final_interpretation(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏"""
        if self.current_stage == 4:
            await self.progress_bar.update_progress(100)
            self.current_stage = 5
    
    async def finish(self, delay: float = 1.5):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å"""
        await self.progress_bar.complete(delay=delay)


async def create_progress_bar(update, context: ContextTypes.DEFAULT_TYPE) -> TarotProgressBar:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    
    :param update: Telegram update
    :param context: Bot context
    :return: –≠–∫–∑–µ–º–ø–ª—è—Ä TarotProgressBar
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤—ë–∑–¥)
        initial_message = (
            f"üîÆ **–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞**\n\n"
            f"‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ 0%\n\n"
            f"üîÆ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ä–∞—Å–∫–ª–∞–¥..."
        )
        
        progress_message = await update.message.reply_text(
            initial_message,
            parse_mode='Markdown'
        )
        
        # –¢—Ä–µ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è 
        chat_id = update.effective_chat.id
        add_message_to_delete(chat_id, progress_message.message_id)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = TarotProgressBar(progress_message)
        
        logger.info("–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å–æ–∑–¥–∞–Ω")
        return progress_bar
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞: {e}")
        raise


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π

class CompactProgressBar:
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    
    @staticmethod
    def generate(progress: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        filled = int(progress / 10)  # 10 –ø–æ–∑–∏—Ü–∏–π
        bar = "‚óè" * filled + "‚óã" * (10 - filled)
        return f"üîÆ {bar} {progress}%"


class EmojiProgressBar:
    """–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å —ç–º–æ–¥–∑–∏-–∞–Ω–∏–º–∞—Ü–∏–µ–π"""
    
    ANIMATION_FRAMES = ["üåë", "üåí", "üåì", "üåî", "üåï"]
    
    @staticmethod
    def generate(progress: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        frame_index = (progress // 20) % len(EmojiProgressBar.ANIMATION_FRAMES)
        moon = EmojiProgressBar.ANIMATION_FRAMES[frame_index]
        
        stars = "‚≠ê" * (progress // 5)
        empty = "‚òÜ" * (20 - progress // 5)
        
        return f"{moon} {stars}{empty} {progress}%"