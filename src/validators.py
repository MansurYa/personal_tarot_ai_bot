"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
"""
import re
from datetime import datetime, date
from typing import Tuple, Union, Dict, Any


def validate_name(text: str) -> Tuple[bool, Union[str, str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:
    - –ù–µ –ø—É—Å—Ç–æ–µ
    - –û—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
    - –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã (–ª—é–±—ã–µ —è–∑—ã–∫–∏), –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã
    - –£–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    
    :param text: –í–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è
    :return: (True, –æ—á–∏—â–µ–Ω–Ω–æ–µ_–∏–º—è) –∏–ª–∏ (False, —Å–æ–æ–±—â–µ–Ω–∏–µ_–æ—à–∏–±–∫–∏)
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    >>> validate_name("–ê–Ω–Ω–∞")
    (True, "–ê–Ω–Ω–∞")
    >>> validate_name("  –ú–∞—Ä–∏—è-–ï–ª–µ–Ω–∞  ")
    (True, "–ú–∞—Ä–∏—è-–ï–ª–µ–Ω–∞")
    >>> validate_name("John Smith")
    (True, "John Smith")
    >>> validate_name("")
    (False, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    >>> validate_name("123")
    (False, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã")
    """
    if not text or not text.strip():
        return False, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned_name = text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
    if len(cleaned_name) < 2:
        return False, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
    
    if len(cleaned_name) > 50:
        return False, "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: –±—É–∫–≤—ã –ª—é–±—ã—Ö —è–∑—ã–∫–æ–≤, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
    pattern = r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$'
    if not re.match(pattern, cleaned_name):
        return False, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞
    if not re.search(r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å]', cleaned_name):
        return False, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É"
    
    return True, cleaned_name


def validate_birthdate(text: str) -> Tuple[bool, Union[Dict[str, Any], str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    
    –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:
    - –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)
    - –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º
    - –í–æ–∑—Ä–∞—Å—Ç –æ—Ç 6 –¥–æ 120 –ª–µ—Ç
    
    :param text: –í–≤–µ–¥—ë–Ω–Ω–∞—è –¥–∞—Ç–∞
    :return: (True, {'date': 'YYYY-MM-DD', 'age': int}) –∏–ª–∏ (False, —Å–æ–æ–±—â–µ–Ω–∏–µ_–æ—à–∏–±–∫–∏)
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    >>> validate_birthdate("15.03.1990")
    (True, {'date': '1990-03-15', 'age': 34})
    >>> validate_birthdate("29.02.2000")
    (True, {'date': '2000-02-29', 'age': 24})
    >>> validate_birthdate("32.01.1990")
    (False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü")
    >>> validate_birthdate("15.03.2030")
    (False, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
    """
    if not text or not text.strip():
        return False, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
    
    text = text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
    pattern = r'^(\d{1,2})\.(\d{1,2})\.(\d{4})$'
    match = re.match(pattern, text)
    
    if not match:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990)"
    
    day, month, year = map(int, match.groups())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞
    try:
        birth_date = date(year, month, day)
    except ValueError:
        return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º
    today = date.today()
    if birth_date >= today:
        return False, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º"
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    age = today.year - birth_date.year
    if (today.month, today.day) < (birth_date.month, birth_date.day):
        age -= 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤–æ–∑—Ä–∞—Å—Ç–∞
    if age < 6:
        return False, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: 6 –ª–µ—Ç"
    
    if age > 120:
        return False, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: 120 –ª–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞—Ç—ã"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO –∏ –≤–æ–∑—Ä–∞—Å—Ç
    result = {
        'date': birth_date.isoformat(),  # 'YYYY-MM-DD'
        'age': age
    }
    
    return True, result


def validate_magic_number(text: str) -> Tuple[bool, Union[int, str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —á–∏—Å–ª–∞
    
    –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:
    - –¶–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999
    - –£–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    
    :param text: –í–≤–µ–¥—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    :return: (True, —á–∏—Å–ª–æ) –∏–ª–∏ (False, —Å–æ–æ–±—â–µ–Ω–∏–µ_–æ—à–∏–±–∫–∏)
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    >>> validate_magic_number("777")
    (True, 777)
    >>> validate_magic_number("  42  ")
    (True, 42)
    >>> validate_magic_number("1")
    (True, 1)
    >>> validate_magic_number("999")
    (True, 999)
    >>> validate_magic_number("0")
    (False, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 999")
    >>> validate_magic_number("1000")
    (False, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 999")
    >>> validate_magic_number("abc")
    (False, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
    """
    if not text or not text.strip():
        return False, "–ú–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    text = text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
    if not text.isdigit():
        return False, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"
    
    try:
        number = int(text)
    except ValueError:
        return False, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    if number < 1:
        return False, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 999"
    
    if number > 999:
        return False, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 999"
    
    return True, number


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_validators():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç—ã validate_name
    print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º validate_name:")
    name_tests = [
        ("–ê–Ω–Ω–∞", True),
        ("–ú–∞—Ä–∏—è-–ï–ª–µ–Ω–∞", True),
        ("John Smith", True),
        ("  –ê–ª–µ–∫—Å–∞–Ω–¥—Ä  ", True),
        ("", False),
        ("–ê", False),
        ("123", False),
        ("–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ –ø—è—Ç—å–¥–µ—Å—è—Ç —Å–∏–º–≤–æ–ª–æ–≤", False),
        ("---", False)
    ]
    
    for test_input, expected_valid in name_tests:
        is_valid, result = validate_name(test_input)
        status = "‚úÖ" if is_valid == expected_valid else "‚ùå"
        print(f"   {status} '{test_input}' ‚Üí {is_valid}, {result}")
    
    print()
    
    # –¢–µ—Å—Ç—ã validate_birthdate
    print("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º validate_birthdate:")
    date_tests = [
        ("15.03.1990", True),
        ("01.01.2000", True),
        ("29.02.2000", True),  # –í–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥
        ("", False),
        ("32.01.1990", False),  # –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å
        ("15.13.1990", False),  # –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü
        ("15.03.2030", False),  # –ë—É–¥—É—â–µ–µ
        ("15.03.1900", False),  # –°–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π
        ("abc", False),
        ("15-03-1990", False)   # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    ]
    
    for test_input, expected_valid in date_tests:
        is_valid, result = validate_birthdate(test_input)
        status = "‚úÖ" if is_valid == expected_valid else "‚ùå"
        print(f"   {status} '{test_input}' ‚Üí {is_valid}, {result}")
    
    print()
    
    # –¢–µ—Å—Ç—ã validate_magic_number
    print("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º validate_magic_number:")
    number_tests = [
        ("777", True),
        ("1", True),
        ("999", True),
        ("  42  ", True),
        ("0", False),
        ("1000", False),
        ("", False),
        ("abc", False),
        ("-5", False),
        ("7.5", False)
    ]
    
    for test_input, expected_valid in number_tests:
        is_valid, result = validate_magic_number(test_input)
        status = "‚úÖ" if is_valid == expected_valid else "‚ùå"
        print(f"   {status} '{test_input}' ‚Üí {is_valid}, {result}")
    
    print("=" * 50)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    test_validators()