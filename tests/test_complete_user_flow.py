"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã + –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π + –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.validators import validate_name, validate_birthdate, validate_magic_number
from src.simple_state import UserState, set_state, get_state, update_data, get_user_data, clear_state
from src.user_manager import init_storage, user_exists, save_user, get_user, update_last_spread, get_user_count


def test_complete_user_registration_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üß™ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    success = init_storage()
    assert success, "–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–ª–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è"
    
    test_chat_id = 123456789
    
    # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    exists_in_state = get_state(test_chat_id) != UserState.IDLE
    exists_in_storage = user_exists(test_chat_id)
    print(f"   –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {exists_in_state}")
    print(f"   –í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {exists_in_storage}")
    assert not exists_in_storage, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–≤—ã–º"
    print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π")
    
    # –≠—Ç–∞–ø 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–∞—Å–∫–ª–∞–¥
    print("\n2Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–∞—Å–∫–ª–∞–¥:")
    set_state(test_chat_id, UserState.WAITING_NAME, {'spread_type': 'celtic_cross'})
    current_state = get_state(test_chat_id)
    current_data = get_user_data(test_chat_id)
    print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    print(f"   –î–∞–Ω–Ω—ã–µ: {current_data}")
    assert current_state == UserState.WAITING_NAME
    assert current_data['spread_type'] == 'celtic_cross'
    print("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –≠—Ç–∞–ø 3: –í–≤–æ–¥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    print("\n3Ô∏è‚É£ –í–≤–æ–¥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏:")
    test_names = ["", "–ê", "–ê–Ω–Ω–∞123", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤–∏—á"]
    valid_name = None
    
    for name_input in test_names:
        is_valid, result = validate_name(name_input)
        print(f"   '{name_input}' ‚Üí {is_valid}")
        if is_valid:
            valid_name = result
            update_data(test_chat_id, 'name', result)
            set_state(test_chat_id, UserState.WAITING_BIRTHDATE)
            print(f"   ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –∏–º—è: {result}")
            break
    
    assert valid_name is not None, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è"
    assert get_state(test_chat_id) == UserState.WAITING_BIRTHDATE
    
    # –≠—Ç–∞–ø 4: –í–≤–æ–¥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    print("\n4Ô∏è‚É£ –í–≤–æ–¥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:")
    test_dates = ["abc", "32.01.1990", "15.03.2030", "15.03.1990"]
    valid_birthdate = None
    user_age = None
    
    for date_input in test_dates:
        is_valid, result = validate_birthdate(date_input)
        if is_valid:
            print(f"   '{date_input}' ‚Üí –≤–∞–ª–∏–¥–Ω–æ, –≤–æ–∑—Ä–∞—Å—Ç {result['age']}")
            valid_birthdate = result['date']
            user_age = result['age']
            update_data(test_chat_id, 'birthdate', result['date'])
            update_data(test_chat_id, 'age', result['age'])
            set_state(test_chat_id, UserState.WAITING_MAGIC_NUMBER)
            print(f"   ‚úÖ –ü—Ä–∏–Ω—è—Ç–∞ –¥–∞—Ç–∞: {result['date']}")
            break
        else:
            print(f"   '{date_input}' ‚Üí {result}")
    
    assert valid_birthdate is not None, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞"
    assert get_state(test_chat_id) == UserState.WAITING_MAGIC_NUMBER
    
    # –≠—Ç–∞–ø 5: –í–≤–æ–¥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —á–∏—Å–ª–∞
    print("\n5Ô∏è‚É£ –í–≤–æ–¥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —á–∏—Å–ª–∞:")
    test_numbers = ["abc", "0", "1000", "777"]
    valid_number = None
    
    for number_input in test_numbers:
        is_valid, result = validate_magic_number(number_input)
        if is_valid:
            print(f"   '{number_input}' ‚Üí –≤–∞–ª–∏–¥–Ω–æ")
            valid_number = result
            update_data(test_chat_id, 'magic_number', result)
            set_state(test_chat_id, UserState.IDLE)
            print(f"   ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ —á–∏—Å–ª–æ: {result}")
            break
        else:
            print(f"   '{number_input}' ‚Üí {result}")
    
    assert valid_number is not None, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ"
    assert get_state(test_chat_id) == UserState.IDLE
    
    # –≠—Ç–∞–ø 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    print("\n6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:")
    session_data = get_user_data(test_chat_id)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º test_chat_id –∫–∞–∫ user_id –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
    success = save_user(test_chat_id, test_chat_id, session_data['name'], session_data['birthdate'])
    print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {'‚úÖ' if success else '‚ùå'}")
    assert success, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    exists = user_exists(test_chat_id)
    print(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {exists}")
    assert exists, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
    print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    
    # –≠—Ç–∞–ø 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    saved_user = get_user(test_chat_id)
    print(f"   –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {saved_user}")
    assert saved_user is not None
    assert saved_user['name'] == valid_name
    assert saved_user['birthdate'] == valid_birthdate
    assert saved_user['age'] == user_age
    assert saved_user['chat_id'] == test_chat_id
    assert 'created_at' in saved_user
    print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –≠—Ç–∞–ø 8: –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞
    print("\n8Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞:")
    success = update_last_spread(test_chat_id)
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å–∫–ª–∞–¥–∞: {'‚úÖ' if success else '‚ùå'}")
    assert success, "–í—Ä–µ–º—è —Ä–∞—Å–∫–ª–∞–¥–∞ –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    updated_user = get_user(test_chat_id)
    print(f"   –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞: {updated_user['last_spread']}")
    assert updated_user['last_spread'] is not None
    print("   ‚úÖ –†–∞—Å–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    
    print("=" * 70)
    print("üéâ –ü–û–õ–ù–´–ô –ü–û–¢–û–ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–†–û–®–Å–õ –£–°–ü–ï–®–ù–û!")
    
    return test_chat_id


def test_returning_user_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüß™ –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    print("=" * 70)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    test_chat_id = 123456789
    
    # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    exists = user_exists(test_chat_id)
    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {exists}")
    assert exists, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user(test_chat_id)
    print(f"   –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data['name']}, –≤–æ–∑—Ä–∞—Å—Ç {user_data['age']}")
    print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω")
    
    # –≠—Ç–∞–ø 2: –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞—Å–∫–ª–∞–¥—É
    print("\n2Ô∏è‚É£ –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É:")
    # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    set_state(test_chat_id, UserState.WAITING_MAGIC_NUMBER, {
        'spread_type': 'love_triangle',
        'name': user_data['name'],
        'age': user_data['age']
    })
    
    current_state = get_state(test_chat_id)
    session_data = get_user_data(test_chat_id)
    print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    print(f"   –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {session_data}")
    assert current_state == UserState.WAITING_MAGIC_NUMBER
    print("   ‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –≠—Ç–∞–ø 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
    print("\n3Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞:")
    is_valid, magic_number = validate_magic_number("333")
    assert is_valid
    update_data(test_chat_id, 'magic_number', magic_number)
    set_state(test_chat_id, UserState.IDLE)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
    success = update_last_spread(test_chat_id)
    assert success
    print("   ‚úÖ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    
    print("=" * 70)
    print("üéâ –ü–û–¢–û–ö –í–û–ó–í–†–ê–©–ê–Æ–©–ï–ì–û–°–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–†–û–®–Å–õ –£–°–ü–ï–®–ù–û!")


def test_multiple_users_isolation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞—ë–º —Ç—Ä—ë—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    users_data = [
        (111111, "–ê–Ω–Ω–∞", "1990-03-15", "single"),
        (222222, "–ü—ë—Ç—Ä", "1985-07-20", "three_cards"),
        (333333, "–ú–∞—Ä–∏—è", "1992-12-10", "celtic_cross")
    ]
    
    # –≠—Ç–∞–ø 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    print("1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for chat_id, name, birthdate, spread_type in users_data:
        set_state(chat_id, UserState.WAITING_NAME, {'spread_type': spread_type})
        update_data(chat_id, 'temp_name', name)  # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}: {spread_type}")
    
    # –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π:")
    for chat_id, name, birthdate, spread_type in users_data:
        state = get_state(chat_id)
        data = get_user_data(chat_id)
        print(f"   {chat_id}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ={state}, spread={data['spread_type']}")
        assert state == UserState.WAITING_NAME
        assert data['spread_type'] == spread_type
    print("   ‚úÖ –ò–∑–æ–ª—è—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –≠—Ç–∞–ø 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\n3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for chat_id, name, birthdate, spread_type in users_data:
        success = save_user(chat_id, chat_id, name, birthdate)  # chat_id –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ user_id –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        assert success, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}"
        print(f"   –°–æ—Ö—Ä–∞–Ω—ë–Ω: {name}")
    
    # –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
    total_users = get_user_count()
    print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    assert total_users >= len(users_data), f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
    for chat_id, name, birthdate, spread_type in users_data:
        user = get_user(chat_id)
        assert user is not None, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        assert user['name'] == name
        assert user['birthdate'] == birthdate
        print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω: {name} (–≤–æ–∑—Ä–∞—Å—Ç {user['age']})")
    
    print("   ‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã")
    
    print("=" * 70)
    print("üéâ –ò–ó–û–õ–Ø–¶–ò–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –†–ê–ë–û–¢–ê–ï–¢!")


def cleanup_test_data():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        test_chat_ids = [123456789, 111111, 222222, 333333]
        for chat_id in test_chat_ids:
            clear_state(chat_id)
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        import shutil
        if os.path.exists("data"):
            shutil.rmtree("data")
        
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        print(f"   ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: {e}")


def run_complete_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 80)
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        test_chat_id = test_complete_user_registration_flow()
        test_returning_user_flow()
        test_multiple_users_isolation()
        
        print("\n" + "=" * 80)
        print("üéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print()
        print("üìã –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞")
        print("   ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
        print("   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("   ‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        print("   ‚úÖ –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        print("   ‚úÖ –ü–æ—Ç–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤")
        print()
        print("üéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í TELEGRAM BOT!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        raise
    finally:
        cleanup_test_data()


if __name__ == "__main__":
    run_complete_tests()