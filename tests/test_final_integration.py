"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –±–æ—Ç–∞
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.config import load_config
from src.keyboards import main_menu, spreads_menu, back_button, SPREAD_NAMES
from src.handlers import handle_callback
from src.bot import start_command, help_command


def test_full_integration():
    """–ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üß™ –§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç...")
    print("=" * 60)
    
    # 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    config = load_config()
    required_keys = ['telegram_bot_token', 'openrouter_api_key', 'model_name']
    for key in required_keys:
        assert key in config, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {key}"
    print("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 2. –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    print("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...")
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main = main_menu()
    assert len(main.inline_keyboard) == 2
    assert main.inline_keyboard[0][0].callback_data == "spreads_list"
    assert main.inline_keyboard[1][0].callback_data == "help"
    
    # –ú–µ–Ω—é —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    spreads = spreads_menu()
    assert len(spreads.inline_keyboard) == 8  # 7 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ + "–ù–∞–∑–∞–¥"
    assert spreads.inline_keyboard[-1][0].callback_data == "back_to_main"
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back = back_button("test")
    assert back.inline_keyboard[0][0].callback_data == "test"
    
    print("   ‚úÖ –í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 3. –†–∞—Å–∫–ª–∞–¥—ã
    print("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Ä–∞—Å–∫–ª–∞–¥–æ–≤...")
    expected_spreads = {
        "spread_single": "–ù–∞ –æ–¥–Ω—É –∫–∞—Ä—Ç—É",
        "spread_three": "–ù–∞ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã",
        "spread_horseshoe": "–ü–æ–¥–∫–æ–≤–∞", 
        "spread_love": "–õ—é–±–æ–≤–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫",
        "spread_celtic": "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
        "spread_week": "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é",
        "spread_year": "–ö–æ–ª–µ—Å–æ –≥–æ–¥–∞"
    }
    
    assert len(SPREAD_NAMES) == 7
    for key, expected_name in expected_spreads.items():
        assert key in SPREAD_NAMES, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞—Å–∫–ª–∞–¥: {key}"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ)
        assert len(SPREAD_NAMES[key]) > 0, f"–ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è {key}"
    
    print("   ‚úÖ –í—Å–µ 7 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    print("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    assert callable(handle_callback)
    assert callable(start_command)
    assert callable(help_command)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ handle_callback –µ—Å—Ç—å —Ä–æ—É—Ç–∏–Ω–≥
    import inspect
    source = inspect.getsource(handle_callback)
    assert "back_to_main" in source
    assert "spreads_list" in source
    assert "help" in source
    assert "spread_" in source
    
    print("   ‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω—É–∂–Ω—É—é –ª–æ–≥–∏–∫—É")
    
    # 5. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    print("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    project_root = os.path.join(os.path.dirname(__file__), '..')
    required_files = [
        'main.py',
        'config.json',
        'requirements.txt',
        'src/bot.py',
        'src/config.py',
        'src/keyboards.py',
        'src/handlers.py',
        'src/openrouter_client.py'
    ]
    
    for file_path in required_files:
        full_path = os.path.join(project_root, file_path)
        assert os.path.exists(full_path), f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {file_path}"
    
    print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    # 6. –ê—Å—Å–µ—Ç—ã
    print("6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Å—Å–µ—Ç—ã...")
    
    assets_path = os.path.join(project_root, 'assets')
    assert os.path.exists(assets_path), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–ø–∫–∞ assets"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—ã
    cards_path = os.path.join(assets_path, 'cards')
    assert os.path.exists(cards_path), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–ø–∫–∞ assets/cards"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–Ω—ã
    backgrounds_path = os.path.join(assets_path, 'backgrounds for spreads')
    assert os.path.exists(backgrounds_path), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–ø–∫–∞ backgrounds for spreads"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç
    cards_json = os.path.join(assets_path, 'tarot-cards-images-info.json')
    assert os.path.exists(cards_json), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tarot-cards-images-info.json"
    
    print("   ‚úÖ –í—Å–µ –∞—Å—Å–µ—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ")
    
    print("=" * 60)
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    print()
    print("üöÄ –ë–û–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
    print()
    print("üìã –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:")
    print("   ‚úÖ Telegram Bot API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    print("   ‚úÖ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏") 
    print("   ‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–π")
    print("   ‚úÖ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö 7 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ —Ç–∞—Ä–æ")
    print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞")
    print("   ‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("   ‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è '–ù–∞–∑–∞–¥'")
    print("   ‚úÖ OpenRouter API –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤")
    print("   ‚úÖ –í—Å–µ –∞—Å—Å–µ—Ç—ã (–∫–∞—Ä—Ç—ã, —Ñ–æ–Ω—ã) –Ω–∞ –º–µ—Å—Ç–µ")
    print("   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    print()
    print("üéØ –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


if __name__ == "__main__":
    test_full_integration()