"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –±–æ—Ç–∞ —Å –ø–æ—à–∞–≥–æ–≤—ã–º —Å–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.user_manager import init_storage, user_exists, get_user, get_user_count
from src.simple_state import UserState, get_state, clear_state
from src.handlers import handle_text_message, handle_spread_selection
from src.keyboards import SPREAD_NAMES


async def simulate_new_user_flow():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üß™ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    success = init_storage()
    assert success, "–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–ª–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è"
    
    test_chat_id = 555555555
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    initial_users = get_user_count()
    user_exists_before = user_exists(test_chat_id)
    user_state = get_state(test_chat_id)
    
    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {initial_users}")
    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_exists_before}")
    print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_state}")
    
    assert not user_exists_before, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    assert user_state == UserState.IDLE, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å IDLE"
    print("   ‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("\n2Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞:")
    # –°–æ–∑–¥–∞—ë–º –º–æ–∫–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockQuery:
        def __init__(self, data, chat_id):
            self.data = data
            self.message = MockMessage(chat_id)
            self.from_user = MockUser(chat_id)
        
        async def edit_message_text(self, text, reply_markup=None):
            print(f"   –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª: {text[:100]}...")
            return True
    
    class MockMessage:
        def __init__(self, chat_id):
            self.chat = MockChat(chat_id)
    
    class MockChat:
        def __init__(self, chat_id):
            self.id = chat_id
    
    class MockUser:
        def __init__(self, user_id):
            self.id = user_id
    
    class MockUpdate:
        def __init__(self, chat_id, text=None, callback_data=None):
            self.effective_chat = MockChat(chat_id)
            if callback_data:
                self.callback_query = MockQuery(callback_data, chat_id)
            if text:
                self.message = MockTextMessage(text, chat_id)
    
    class MockTextMessage:
        def __init__(self, text, chat_id):
            self.text = text
            self.chat = MockChat(chat_id)
        
        async def reply_text(self, text, reply_markup=None):
            print(f"   –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª: {text[:100]}...")
            return True
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞
    spread_type = "spread_celtic"
    mock_update = MockUpdate(test_chat_id, callback_data=spread_type)
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
        await handle_spread_selection(mock_update, None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        new_state = get_state(test_chat_id)
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞: {new_state}")
        assert new_state == UserState.WAITING_NAME, f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å WAITING_NAME, –∞ –Ω–µ {new_state}"
        print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à—ë–ª –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏")
    
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å–∫–ª–∞–¥–∞: {e}")
        raise
    
    print("\n3Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏:")
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–º–µ–Ω–∞
    wrong_names = ["", "–ê", "123"]
    for wrong_name in wrong_names:
        mock_update = MockUpdate(test_chat_id, text=wrong_name)
        try:
            await handle_text_message(mock_update, None)
            state = get_state(test_chat_id)
            assert state == UserState.WAITING_NAME, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è WAITING_NAME –ø—Ä–∏ –æ—à–∏–±–∫–µ"
            print(f"   ‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è '{wrong_name}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ '{wrong_name}': {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è
    correct_name = "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞"
    mock_update = MockUpdate(test_chat_id, text=correct_name)
    try:
        await handle_text_message(mock_update, None)
        state = get_state(test_chat_id)
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏: {state}")
        assert state == UserState.WAITING_BIRTHDATE, f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å WAITING_BIRTHDATE, –∞ –Ω–µ {state}"
        print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø—Ä–∏–Ω—è—Ç–æ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏: {e}")
        raise
    
    print("\n4Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:")
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã
    wrong_dates = ["abc", "32.01.1990", "15.03.2030"]
    for wrong_date in wrong_dates:
        mock_update = MockUpdate(test_chat_id, text=wrong_date)
        try:
            await handle_text_message(mock_update, None)
            state = get_state(test_chat_id)
            assert state == UserState.WAITING_BIRTHDATE, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è WAITING_BIRTHDATE –ø—Ä–∏ –æ—à–∏–±–∫–µ"
            print(f"   ‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ '{wrong_date}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã '{wrong_date}': {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É
    correct_date = "25.07.1992"
    mock_update = MockUpdate(test_chat_id, text=correct_date)
    try:
        await handle_text_message(mock_update, None)
        state = get_state(test_chat_id)
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –¥–∞—Ç—ã: {state}")
        assert state == UserState.WAITING_MAGIC_NUMBER, f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å WAITING_MAGIC_NUMBER, –∞ –Ω–µ {state}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        user_exists_now = user_exists(test_chat_id)
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {user_exists_now}")
        assert user_exists_now, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"
        print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç—ã: {e}")
        raise
    
    print("\n5Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –≤–≤–æ–¥–∞ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —á–∏—Å–ª–∞:")
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞
    wrong_numbers = ["abc", "0", "1000"]
    for wrong_number in wrong_numbers:
        mock_update = MockUpdate(test_chat_id, text=wrong_number)
        try:
            await handle_text_message(mock_update, None)
            state = get_state(test_chat_id)
            assert state == UserState.WAITING_MAGIC_NUMBER, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è WAITING_MAGIC_NUMBER –ø—Ä–∏ –æ—à–∏–±–∫–µ"
            print(f"   ‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ '{wrong_number}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∏—Å–ª–∞ '{wrong_number}': {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    correct_number = "777"
    mock_update = MockUpdate(test_chat_id, text=correct_number)
    try:
        await handle_text_message(mock_update, None)
        state = get_state(test_chat_id)
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —á–∏—Å–ª–∞: {state}")
        assert state == UserState.IDLE, f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å IDLE, –∞ –Ω–µ {state}"
        print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–∏–Ω—è—Ç–æ, –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞: {e}")
        raise
    
    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
    final_users = get_user_count()
    saved_user = get_user(test_chat_id)
    
    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {final_users}")
    print(f"   –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {saved_user}")
    
    assert final_users > initial_users, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è"
    assert saved_user is not None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω"
    assert saved_user['name'] == correct_name, f"–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '{correct_name}'"
    assert saved_user['chat_id'] == test_chat_id, "Chat ID –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
    assert 'age' in saved_user, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω"
    
    print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    print("=" * 60)
    print("üéâ –ü–û–õ–ù–´–ô –ü–û–¢–û–ö –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–†–û–®–Å–õ –£–°–ü–ï–®–ù–û!")
    
    return test_chat_id


async def simulate_returning_user_flow(existing_chat_id):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüß™ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Ç–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    print("=" * 60)
    
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    user_exists_check = user_exists(existing_chat_id)
    saved_user = get_user(existing_chat_id)
    
    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_exists_check}")
    print(f"   –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {saved_user['name'] if saved_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    
    assert user_exists_check, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    assert saved_user is not None, "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è"
    print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω")
    
    print("\n2Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞:")
    
    # –ö–ª–∞—Å—Å—ã –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏)
    class MockQuery:
        def __init__(self, data, chat_id):
            self.data = data
            self.message = MockMessage(chat_id)
            self.from_user = MockUser(chat_id)
        
        async def edit_message_text(self, text, reply_markup=None):
            print(f"   –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª: {text[:100]}...")
            return True
    
    class MockMessage:
        def __init__(self, chat_id):
            self.chat = MockChat(chat_id)
    
    class MockChat:
        def __init__(self, chat_id):
            self.id = chat_id
    
    class MockUser:
        def __init__(self, user_id):
            self.id = user_id
    
    class MockUpdate:
        def __init__(self, chat_id, text=None, callback_data=None):
            self.effective_chat = MockChat(chat_id)
            if callback_data:
                self.callback_query = MockQuery(callback_data, chat_id)
            if text:
                self.message = MockTextMessage(text, chat_id)
    
    class MockTextMessage:
        def __init__(self, text, chat_id):
            self.text = text
            self.chat = MockChat(chat_id)
        
        async def reply_text(self, text, reply_markup=None):
            print(f"   –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª: {text[:100]}...")
            return True
    
    # –í—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–æ–π —Ä–∞—Å–∫–ª–∞–¥
    spread_type = "spread_love"
    mock_update = MockUpdate(existing_chat_id, callback_data=spread_type)
    
    try:
        await handle_spread_selection(mock_update, None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—à–ª–∏ –∫ –º–∞–≥–∏—á–µ—Å–∫–æ–º—É —á–∏—Å–ª—É (–ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é)
        state = get_state(existing_chat_id)
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞: {state}")
        assert state == UserState.WAITING_MAGIC_NUMBER, f"–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥ –∫ WAITING_MAGIC_NUMBER, –∞ –Ω–µ {state}"
        print("   ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞, —Å—Ä–∞–∑—É –∫ –º–∞–≥–∏—á–µ—Å–∫–æ–º—É —á–∏—Å–ª—É")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å–∫–ª–∞–¥–∞: {e}")
        raise
    
    print("\n3Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –≤–≤–æ–¥–∞ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —á–∏—Å–ª–∞:")
    correct_number = "333"
    mock_update = MockUpdate(existing_chat_id, text=correct_number)
    
    try:
        await handle_text_message(mock_update, None)
        state = get_state(existing_chat_id)
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —á–∏—Å–ª–∞: {state}")
        assert state == UserState.IDLE, f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å IDLE, –∞ –Ω–µ {state}"
        print("   ‚úÖ –†–∞—Å–∫–ª–∞–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞: {e}")
        raise
    
    print("=" * 60)
    print("üéâ –ü–û–¢–û–ö –í–û–ó–í–†–ê–©–ê–Æ–©–ï–ì–û–°–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–†–û–®–Å–õ –£–°–ü–ï–®–ù–û!")


async def run_full_integration_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –±–æ—Ç–∞"""
    print("üöÄ –ü–û–õ–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ë–û–¢–ê")
    print("=" * 80)
    
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        cleanup_test_data()
        
        # –¢–µ—Å—Ç 1: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        test_chat_id = await simulate_new_user_flow()
        
        # –¢–µ—Å—Ç 2: –í–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await simulate_returning_user_flow(test_chat_id)
        
        print("\n" + "=" * 80)
        print("üéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print()
        print("üìã –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏:")
        print("   ‚úÖ –í—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("   ‚úÖ –ü–æ—à–∞–≥–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–∏–º—è ‚Üí –¥–∞—Ç–∞ ‚Üí —á–∏—Å–ª–æ)")
        print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞")
        print("   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        print("   ‚úÖ –ë—ã—Å—Ç—Ä—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏")
        print()
        print("üéØ –ë–û–¢ –ì–û–¢–û–í –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        raise
    finally:
        cleanup_test_data()


def cleanup_test_data():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        test_chat_ids = [555555555]
        for chat_id in test_chat_ids:
            clear_state(chat_id)
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        import shutil
        if os.path.exists("data"):
            shutil.rmtree("data")
    except Exception:
        pass


if __name__ == "__main__":
    import asyncio
    asyncio.run(run_full_integration_test())