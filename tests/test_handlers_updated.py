"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.handlers import (
    handle_main_menu, 
    handle_spreads_list, 
    handle_spread_selection, 
    handle_help, 
    handle_callback
)
from src.keyboards import SPREAD_NAMES


def test_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    assert callable(handle_main_menu)
    assert callable(handle_spreads_list)
    assert callable(handle_spread_selection)
    assert callable(handle_help)
    assert callable(handle_callback)
    
    print("   ‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_spread_names_usage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–ª–æ–≤–∞—Ä—å SPREAD_NAMES –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ"""
    print("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SPREAD_NAMES...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –µ—Å—Ç—å
    expected_spreads = [
        "spread_single", "spread_three", "spread_horseshoe",
        "spread_love", "spread_celtic", "spread_week", "spread_year"
    ]
    
    for spread in expected_spreads:
        assert spread in SPREAD_NAMES
        assert isinstance(SPREAD_NAMES[spread], str)
        assert len(SPREAD_NAMES[spread]) > 0
    
    print(f"   ‚úÖ –í—Å–µ {len(SPREAD_NAMES)} —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_callback_routing_logic():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ callback_data
    test_callbacks = [
        "back_to_main",
        "spreads_list", 
        "help",
        "spread_single",
        "spread_three",
        "spread_unknown"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ callback –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    known_callbacks = ["back_to_main", "spreads_list", "help"]
    spread_callbacks = [cb for cb in test_callbacks if cb.startswith("spread_")]
    
    assert len(known_callbacks) == 3
    assert len(spread_callbacks) >= 2  # –ú–∏–Ω–∏–º—É–º 2 spread callback –¥–ª—è —Ç–µ—Å—Ç–∞
    
    print("   ‚úÖ –õ–æ–≥–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")


def test_error_handling_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è handle_callback –∏–º–µ–µ—Ç try-except –±–ª–æ–∫
    import inspect
    source = inspect.getsource(handle_callback)
    
    assert "try:" in source
    assert "except" in source
    assert "logger.error" in source
    
    print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")


def test_docstrings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ docstring —É –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    functions = [
        handle_main_menu,
        handle_spreads_list, 
        handle_spread_selection,
        handle_help,
        handle_callback
    ]
    
    for func in functions:
        assert func.__doc__ is not None
        assert len(func.__doc__.strip()) > 0
    
    print("   ‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    print("=" * 60)
    
    try:
        test_imports()
        test_spread_names_usage()
        test_callback_routing_logic()
        test_error_handling_structure()
        test_docstrings()
        
        print("=" * 60)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print()
        print("üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("   ‚Ä¢ handle_main_menu() - –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        print("   ‚Ä¢ handle_spreads_list() - —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–æ–≤")
        print("   ‚Ä¢ handle_spread_selection() - –≤—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞")
        print("   ‚Ä¢ handle_help() - —Å–ø—Ä–∞–≤–∫–∞ –æ –±–æ—Ç–µ")
        print("   ‚Ä¢ handle_callback() - —Ä–æ—É—Ç–µ—Ä callback-–∑–∞–ø—Ä–æ—Å–æ–≤")
        print("   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ edit_message_text")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        raise


if __name__ == "__main__":
    run_all_tests()