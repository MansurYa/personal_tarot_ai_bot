"""
–¢–µ—Å—Ç—ã –¥–ª—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.keyboards import main_menu, spreads_menu, back_button, help_menu, SPREAD_NAMES


def test_main_menu():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = main_menu()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ InlineKeyboardMarkup
    assert hasattr(keyboard, 'inline_keyboard')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
    buttons = keyboard.inline_keyboard
    assert len(buttons) == 2  # "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥" –∏ "–ü–æ–º–æ—â—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data
    assert buttons[0][0].callback_data == "spreads_list"
    assert buttons[1][0].callback_data == "help"
    
    print("‚úÖ test_main_menu –ø—Ä–æ—à—ë–ª")


def test_spreads_menu():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ–Ω—é —Ä–∞—Å–∫–ª–∞–¥–æ–≤"""
    keyboard = spreads_menu()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ InlineKeyboardMarkup
    assert hasattr(keyboard, 'inline_keyboard')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ (7 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ + –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥")
    buttons = keyboard.inline_keyboard
    assert len(buttons) == 8
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ - "–ù–∞–∑–∞–¥"
    assert buttons[-1][0].callback_data == "back_to_main"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ callback_data –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "spread_"
    spread_callbacks = [button[0].callback_data for button in buttons[:-1]]  # –ò—Å–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    for callback in spread_callbacks:
        assert callback.startswith("spread_")
    
    print("‚úÖ test_spreads_menu –ø—Ä–æ—à—ë–ª")


def test_back_button():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'"""
    keyboard = back_button("test_callback")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ InlineKeyboardMarkup
    assert hasattr(keyboard, 'inline_keyboard')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
    buttons = keyboard.inline_keyboard
    assert len(buttons) == 1
    assert len(buttons[0]) == 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_data
    assert buttons[0][0].callback_data == "test_callback"
    
    print("‚úÖ test_back_button –ø—Ä–æ—à—ë–ª")


def test_help_menu():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
    keyboard = help_menu()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ InlineKeyboardMarkup
    assert hasattr(keyboard, 'inline_keyboard')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    buttons = keyboard.inline_keyboard
    assert len(buttons) == 1
    assert buttons[0][0].callback_data == "back_to_main"
    
    print("‚úÖ test_help_menu –ø—Ä–æ—à—ë–ª")


def test_spread_names():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏ –µ—Å—Ç—å
    expected_keys = [
        "spread_single", "spread_three", "spread_horseshoe", 
        "spread_love", "spread_celtic", "spread_week", "spread_year"
    ]
    
    for key in expected_keys:
        assert key in SPREAD_NAMES
        assert isinstance(SPREAD_NAMES[key], str)
        assert len(SPREAD_NAMES[key]) > 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É (7)
    assert len(SPREAD_NAMES) == 7
    
    print("‚úÖ test_spread_names –ø—Ä–æ—à—ë–ª")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    print("=" * 50)
    
    try:
        test_main_menu()
        test_spreads_menu()
        test_back_button()
        test_help_menu()
        test_spread_names()
        
        print("=" * 50)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        raise


if __name__ == "__main__":
    run_all_tests()