"""
–¢–µ—Å—Ç—ã –¥–ª—è main.py
"""
import sys
import os
import json
import tempfile
from unittest.mock import patch
import subprocess
import signal
import time


def test_main_with_valid_config():
    """
    –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ main.py —Å –≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞)
    """
    print("üß™ –¢–µ—Å—Ç: –∑–∞–ø—É—Å–∫ main.py —Å –≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
    with tempfile.TemporaryDirectory() as temp_dir:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        original_dir = os.getcwd()
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.chdir(temp_dir)
            
            # –°–æ–∑–¥–∞–µ–º src –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Ñ–∞–π–ª—ã
            os.makedirs('src', exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã src
            src_files = ['config.py', 'bot.py', '__init__.py']
            for filename in src_files:
                src_path = os.path.join(original_dir, 'src', filename)
                dest_path = os.path.join('src', filename)
                if os.path.exists(src_path):
                    with open(src_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    with open(dest_path, 'w', encoding='utf-8') as f:
                        f.write(content)
            
            # –°–æ–∑–¥–∞–µ–º main.py
            main_path = os.path.join(original_dir, 'main.py')
            with open(main_path, 'r', encoding='utf-8') as f:
                main_content = f.read()
            with open('main.py', 'w', encoding='utf-8') as f:
                f.write(main_content)
            
            # –°–æ–∑–¥–∞–µ–º config.json —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
            test_config = {
                "telegram_bot_token": "123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                "openrouter_api_key": "sk-or-v1-test-key",
                "bot_username": "@test_bot",
                "model_name": "deepseek/deepseek-chat-v3-0324:free",
                "max_message_length": 4096,
                "max_response_tokens": 8000,
                "temperature": 0.3
            }
            
            with open("config.json", "w", encoding="utf-8") as f:
                json.dump(test_config, f, indent=4, ensure_ascii=False)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            # (–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞)
            test_code = '''
import sys
sys.path.insert(0, "src")
from config import load_config

try:
    config = load_config()
    token = config.get("telegram_bot_token", "").strip()
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    else:
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   Bot: {config.get('bot_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"   Model: {config.get('model_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print("‚úÖ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    sys.exit(1)
'''
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
            result = subprocess.run([sys.executable, '-c', test_code], 
                                  capture_output=True, text=True)
            
            if result.returncode == 0 and "‚úÖ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!" in result.stdout:
                print("‚úÖ –£–°–ü–ï–•: main.py –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —Å –≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
                print("üìã –í—ã–≤–æ–¥:")
                for line in result.stdout.strip().split('\n'):
                    print(f"   {line}")
                return True
            else:
                print("‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                print(f"Return code: {result.returncode}")
                print(f"STDOUT: {result.stdout}")
                print(f"STDERR: {result.stderr}")
                return False
                
        finally:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.chdir(original_dir)


def test_main_with_empty_token():
    """
    –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ main.py —Å –ø—É—Å—Ç—ã–º —Ç–æ–∫–µ–Ω–æ–º
    """
    print("\nüß™ –¢–µ—Å—Ç: –∑–∞–ø—É—Å–∫ main.py —Å –ø—É—Å—Ç—ã–º —Ç–æ–∫–µ–Ω–æ–º")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
    with tempfile.TemporaryDirectory() as temp_dir:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        original_dir = os.getcwd()
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.chdir(temp_dir)
            
            # –°–æ–∑–¥–∞–µ–º src –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Ñ–∞–π–ª—ã
            os.makedirs('src', exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã src
            src_files = ['config.py', 'bot.py', '__init__.py']
            for filename in src_files:
                src_path = os.path.join(original_dir, 'src', filename)
                dest_path = os.path.join('src', filename)
                if os.path.exists(src_path):
                    with open(src_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    with open(dest_path, 'w', encoding='utf-8') as f:
                        f.write(content)
            
            # –°–æ–∑–¥–∞–µ–º config.json —Å –ø—É—Å—Ç—ã–º —Ç–æ–∫–µ–Ω–æ–º
            test_config = {
                "telegram_bot_token": "",  # –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω
                "openrouter_api_key": "sk-or-v1-test-key",
                "bot_username": "@test_bot",
                "model_name": "deepseek/deepseek-chat-v3-0324:free",
                "max_message_length": 4096,
                "max_response_tokens": 8000,
                "temperature": 0.3
            }
            
            with open("config.json", "w", encoding="utf-8") as f:
                json.dump(test_config, f, indent=4, ensure_ascii=False)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º —Ç–æ–∫–µ–Ω–æ–º
            test_code = '''
import sys
sys.path.insert(0, "src")

try:
    from config import load_config
    config = load_config()
    print("‚ùå –û–®–ò–ë–ö–ê: –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã–ª –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
    sys.exit(1)
except ValueError as e:
    if "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config.json" in str(e):
        print("‚úÖ –£–°–ü–ï–•: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
        sys.exit(0)
    else:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        sys.exit(1)
except Exception as e:
    print(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
    sys.exit(1)
'''
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
            result = subprocess.run([sys.executable, '-c', test_code], 
                                  capture_output=True, text=True)
            
            if result.returncode == 0 and "‚úÖ –£–°–ü–ï–•" in result.stdout:
                print("‚úÖ –£–°–ü–ï–•: –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
                return True
            else:
                print("‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
                print(f"Return code: {result.returncode}")
                print(f"STDOUT: {result.stdout}")
                print(f"STDERR: {result.stderr}")
                return False
                
        finally:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.chdir(original_dir)


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è main.py\n")
    
    tests_passed = 0
    total_tests = 2
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    if test_main_with_valid_config():
        tests_passed += 1
    
    if test_main_with_empty_token():
        tests_passed += 1
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ main.py –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        sys.exit(1)