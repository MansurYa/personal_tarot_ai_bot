"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –§–ê–ó–´ 3: 
–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã + –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.validators import validate_name, validate_birthdate, validate_magic_number
from src.simple_state import (
    UserState, set_state, get_state, get_user_data, 
    update_data, clear_state, reset_to_idle
)


def test_user_registration_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    print("=" * 60)
    
    test_chat_id = 987654321
    
    # –®–∞–≥ 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("1Ô∏è‚É£ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    state = get_state(test_chat_id)
    print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
    assert state == UserState.IDLE
    print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ IDLE")
    
    # –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
    print("\n2Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–±–æ—Ä—É –∏–º–µ–Ω–∏:")
    set_state(test_chat_id, UserState.WAITING_NAME, {'spread_type': 'single'})
    state = get_state(test_chat_id)
    data = get_user_data(test_chat_id)
    print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
    print(f"   –î–∞–Ω–Ω—ã–µ: {data}")
    assert state == UserState.WAITING_NAME
    assert data['spread_type'] == 'single'
    print("   ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–±–æ—Ä—É –∏–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    
    # –®–∞–≥ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    print("\n3Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏:")
    test_names = [
        ("", False, "–ü—É—Å—Ç–æ–µ –∏–º—è"),
        ("–ê", False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ"),
        ("–ê–Ω–Ω–∞123", False, "–° —Ü–∏—Ñ—Ä–∞–º–∏"),
        ("–ê–Ω–Ω–∞", True, "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è")
    ]
    
    for name_input, should_be_valid, description in test_names:
        is_valid, result = validate_name(name_input)
        status = "‚úÖ" if is_valid == should_be_valid else "‚ùå"
        print(f"   {status} {description}: '{name_input}' ‚Üí {is_valid}")
        
        if is_valid:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            update_data(test_chat_id, 'name', result)
            set_state(test_chat_id, UserState.WAITING_BIRTHDATE)
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    data = get_user_data(test_chat_id)
    state = get_state(test_chat_id)
    assert 'name' in data
    assert state == UserState.WAITING_BIRTHDATE
    print("   ‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è")
    
    # –®–∞–≥ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    print("\n4Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:")
    test_dates = [
        ("", False, "–ü—É—Å—Ç–∞—è –¥–∞—Ç–∞"),
        ("32.01.1990", False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å"),
        ("15.13.1990", False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü"),
        ("15.03.2030", False, "–ë—É–¥—É—â–∞—è –¥–∞—Ç–∞"),
        ("15.03.1990", True, "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")
    ]
    
    for date_input, should_be_valid, description in test_dates:
        is_valid, result = validate_birthdate(date_input)
        status = "‚úÖ" if is_valid == should_be_valid else "‚ùå"
        if is_valid:
            print(f"   {status} {description}: '{date_input}' ‚Üí –≤–æ–∑—Ä–∞—Å—Ç {result['age']}")
        else:
            print(f"   {status} {description}: '{date_input}' ‚Üí {result}")
        
        if is_valid:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—É—é –¥–∞—Ç—É
            update_data(test_chat_id, 'birthdate', result['date'])
            update_data(test_chat_id, 'age', result['age'])
            set_state(test_chat_id, UserState.WAITING_MAGIC_NUMBER)
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
    data = get_user_data(test_chat_id)
    state = get_state(test_chat_id)
    assert 'birthdate' in data
    assert 'age' in data
    assert state == UserState.WAITING_MAGIC_NUMBER
    print("   ‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–∞–≥–∏—á–µ—Å–∫–æ–º—É —á–∏—Å–ª—É")
    
    # –®–∞–≥ 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —á–∏—Å–ª–∞
    print("\n5Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —á–∏—Å–ª–∞:")
    test_numbers = [
        ("", False, "–ü—É—Å—Ç–æ–µ —á–∏—Å–ª–æ"),
        ("0", False, "–ù–æ–ª—å"),
        ("1000", False, "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ"),
        ("abc", False, "–ù–µ —á–∏—Å–ª–æ"),
        ("777", True, "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    ]
    
    for number_input, should_be_valid, description in test_numbers:
        is_valid, result = validate_magic_number(number_input)
        status = "‚úÖ" if is_valid == should_be_valid else "‚ùå"
        print(f"   {status} {description}: '{number_input}' ‚Üí {result}")
        
        if is_valid:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ
            update_data(test_chat_id, 'magic_number', result)
            set_state(test_chat_id, UserState.IDLE)
            break
    
    # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
    final_state = get_state(test_chat_id)
    final_data = get_user_data(test_chat_id)
    
    print(f"   –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {final_state}")
    print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {final_data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
    required_fields = ['spread_type', 'name', 'birthdate', 'age', 'magic_number']
    for field in required_fields:
        assert field in final_data, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}"
    
    assert final_state == UserState.IDLE
    print("   ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    clear_state(test_chat_id)
    
    print("=" * 60)
    print("üéâ –ü–æ—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


def test_multiple_users_isolation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    print("=" * 60)
    
    user1_id = 111111
    user2_id = 222222
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    set_state(user1_id, UserState.WAITING_NAME, {'spread_type': 'single'})
    set_state(user2_id, UserState.WAITING_BIRTHDATE, {'name': '–ú–∞—Ä–∏—è'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π
    user1_state = get_state(user1_id)
    user2_state = get_state(user2_id)
    user1_data = get_user_data(user1_id)
    user2_data = get_user_data(user2_id)
    
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: —Å–æ—Å—Ç–æ—è–Ω–∏–µ={user1_state}, –¥–∞–Ω–Ω—ã–µ={user1_data}")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: —Å–æ—Å—Ç–æ—è–Ω–∏–µ={user2_state}, –¥–∞–Ω–Ω—ã–µ={user2_data}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    assert user1_state == UserState.WAITING_NAME
    assert user2_state == UserState.WAITING_BIRTHDATE
    assert user1_data['spread_type'] == 'single'
    assert user2_data['name'] == '–ú–∞—Ä–∏—è'
    assert 'name' not in user1_data
    assert 'spread_type' not in user2_data
    
    print("‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
    # –û—á–∏—Å—Ç–∫–∞
    clear_state(user1_id)
    clear_state(user2_id)


def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏...")
    print("=" * 60)
    
    test_chat_id = 555555
    
    # –¢–µ—Å—Ç 1: –†–∞–±–æ—Ç–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    print("1Ô∏è‚É£ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:")
    state = get_state(999999999)
    data = get_user_data(999999999)
    print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}, –î–∞–Ω–Ω—ã–µ: {data}")
    assert state == UserState.IDLE
    assert len(data) == 0
    print("   ‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç 2: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
    print("\n2Ô∏è‚É£ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
    
    # –ò–º—è —Ä–æ–≤–Ω–æ 2 —Å–∏–º–≤–æ–ª–∞
    is_valid, result = validate_name("–Ø–Ω")
    assert is_valid == True
    print(f"   ‚úÖ –ò–º—è –∏–∑ 2 —Å–∏–º–≤–æ–ª–æ–≤: {result}")
    
    # –ò–º—è —Ä–æ–≤–Ω–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
    long_name = "–ê–Ω–Ω–∞-–ú–∞—Ä–∏—è-–ï–ª–µ–Ω–∞-–í–∏–∫—Ç–æ—Ä–∏—è-–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞-–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞"
    is_valid, result = validate_name(long_name)
    print(f"   –ò–º—è {len(long_name)} —Å–∏–º–≤–æ–ª–æ–≤: {is_valid}")
    
    # –í–æ–∑—Ä–∞—Å—Ç 6 –ª–µ—Ç (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π)
    from datetime import date
    current_year = date.today().year
    min_age_date = f"01.01.{current_year - 6}"
    is_valid, result = validate_birthdate(min_age_date)
    print(f"   ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {result['age']} –ª–µ—Ç")
    
    # –ß–∏—Å–ª–æ 1 –∏ 999
    assert validate_magic_number("1")[0] == True
    assert validate_magic_number("999")[0] == True
    print("   ‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞: 1 –∏ 999")
    
    # –¢–µ—Å—Ç 3: –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
    print("\n3Ô∏è‚É£ –°–±—Ä–æ—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö:")
    set_state(test_chat_id, UserState.WAITING_NAME, {'important_data': 'keep_me'})
    update_data(test_chat_id, 'user_name', '–¢–µ—Å—Ç')
    
    reset_to_idle(test_chat_id, keep_data=True)
    
    final_state = get_state(test_chat_id)
    final_data = get_user_data(test_chat_id)
    
    assert final_state == UserState.IDLE
    assert 'important_data' in final_data
    assert 'user_name' in final_data
    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: {final_data}")
    
    # –û—á–∏—Å—Ç–∫–∞
    clear_state(test_chat_id)
    clear_state(999999999)
    
    print("=" * 60)
    print("üéâ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –§–ê–ó–´ 3"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´ –§–ê–ó–´ 3")
    print("=" * 80)
    
    try:
        test_user_registration_flow()
        test_multiple_users_isolation() 
        test_edge_cases()
        
        print("\n" + "=" * 80)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print()
        print("üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–º—ë–Ω (validate_name)")
        print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞—Ç —Ä–æ–∂–¥–µ–Ω–∏—è (validate_birthdate)")
        print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª (validate_magic_number)")
        print("   ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π (simple_state)")
        print("   ‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        print("   ‚úÖ –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("   ‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        print()
        print("üéØ –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê –ì–û–¢–û–í–ê –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í –ë–û–¢!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        raise


if __name__ == "__main__":
    run_all_tests()